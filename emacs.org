#+TAGS: GTD(g) TIME(t) CLOCKIN(k) SUDO(s) CLIPBOARD(c)
#+SEQ_TODO: TODO TEST DONE
* Text manipulation
** Rectangle Mode
*** Delete "C-x r d"
*** [[rantangle mode ][https://kb.iu.edu/d/afhg]]
*** rectangle-mark-mode
** CUA
*** cua-resize-rectangle-right
** Regex
*** [[http://ergoemacs.org/emacs/emacs_regex.html][Emacs: Regex Text Pattern Tutorial ]]
*** Syntax
**** DONE Double Quate
     CLOSED: [2015-11-23 সোম 22:07]
| PatternMatches                                  |
| "\([^"]+\)" capture text between double quotes. |
| "hello world"                                   |

*** Matching Newline ＆ Tab
**** To enter a new line, press 【Ctrl+q Ctrl+j】 Emacs: Newline link [[http://ergoemacs.org/emacs/emacs_line_ending_char.html][^M ^J ^L]]
**** To enter a Tab character, press 【Ctrl+q Tab ↹】
***  Boundary anchors
| \`…                           |
| Beginning of {string, buffer} |
| …\'                           |
| End of {string, buffer}       |
| \b                            |
| word boundary marker          |

* Clipboard [2/3]                                                 :CLIPBOARD:
  - [X] Meta clipboard-kill-ring-save
  - [ ] clipboard-kill-region
  - [X] clipboard-yank
* Buffer
** Line Truncate
*** Elisp Command
Note: Need to reset Emacs to get truncate effect
or use [[Command]] directly
#+BEGIN_SRC elisp
(setq-default truncate-lines nil)
#+END_SRC
#+RESULTS:
*** Command
****  M-x set-variable truncate-lines nil.
** M-x RET set-variable RET
*** bold, italic
【Alt+o d】 default
【Alt+o b】 bold
【Alt+o i】 italic
【Alt+o l】 bold-italic
【Alt+o u】 underline
Press 【Alt+o Ctrl+h】 to see complete list of keys.

** IDO Intro: M-x customize-group RET ido RET
* Cursor Movement and Location
	- [X] arrow keys (if available)N/AMove cursor.
	- [X] C-abeginning-of-lineMove to beginning of line.
	- [X] C-eend-of-lineMove to end of line.
	- [ ] C-fforward-charMove forward one character.
	- [ ] C-bbackward-charMove backward one character.
	- [ ] M-f forward-wordMove forward one word.
	- [ ] M-bbackward-wordMove backward one word.
	- [X] C-nnext-lineMove down a line (creating the next line, if necessary).
	- [X] C-pprevious-lineMove up a line.
	- [ ] M-r move-to-window-lineMove to left margin, vertically centered in window.
	- [X] M-<beginning-of-bufferMove to top of buffer.
	- [X] M->end-of-bufferMove to end of buffer.
	- [ ] M-x goto-chargoto-charRead a number and go to that buffer position (start = 1).
	- [X] M-x goto-line goto-line Read a number and go to that line (first line = 1).
	- [ ] C-x C-nset-goal-columnSet current column as 'goal column'.  From then on, the C-n and C-p commands jump to that column, or the nearest possible column.
	- [ ] C-u C-x C-nN/ACancel the 'goal column', and return to normal behaviour.
	- [ ] M-x what-pagewhat-pageDisplay page number and line number (within page) of cursor location.
	- [ ] M-x what-linewhat-lineDisplay line number (within buffer) of cursor location.
	- [ ] M-x line-number-modeline-number-modeDisplay line number automatically (toggle).
	- [ ] M-=count-lines-regionPrint number of lines in current region.
	- [ ] C-x =what-cursor-postitionPrint character code, character position and column of the cursor location.
** Setting Mark C-@ -> (c shfit 1 )
** [http://www.gnu.org/software/emacs/manual/html_node/emacs/Mark.htmlhttp://www.gnu.org/software/emacs/manual/html_node/emacs/Mark.htmlhttp://www.gnu.org/software/emacs/manual/html_node/emacs/Mark.html]
** C-w . . Kill region. This deletes and puts the region into the kill ring.
** C-y . . Yank. This inserts the last snippet from the kill ring.
** M-y . . Cycle kill ring. Immediately after C-y, this replaces the yanked part by the other snippets in the kill ring.
** M-w . . Save region into kill ring. Like C-w, but doesn't delete.
** In short, you start selection like usual with C-spc, then kill region with C-x r k and paste/yank killed block with C-x r y
** Creating and Selecting Buffers [[http://www.chemie.fu-berlin.de/chemnet/use/info/emacs/emacs_19.html][multiple buffer ]]
** C-x b buffer RET
** C-x 4 buffer RET - another window ( switch-to-buffer-other-window )
** C-x 4 b buffer RET another frame
* Org Mode
** Todo
*** C-c a t (org-todo-list)
Show global TODO list
*** S-M-<RET> (org-insert-todo-heading)
Insert a new TODO entry below the current one.
*** DONE Closing items by adding time and note
    CLOSED: [2016-01-05 মঙ্গল 19:34]
    - CLOSING NOTE [2016-01-05 মঙ্গল 19:34] \\
      Exercise within 30 days
#+BEGIN_SRC elisp
(setq org-log-done 'time)
(setq org-log-done 'note)
#+END_SRC

#+RESULTS:
: note

** Links
*** [[http://endlessparentheses.com/use-org-mode-links-for-absolutely-anything.html][Use Org-Mode Links for Absolutely Anything ]]
** Agenda
*** custom views that are special searches and combinations of different views.
#+BEGIN: clocktable :maxlevel 3 :scope subtree
#+CAPTION: Clock summary at [2015-11-23 সোম 20:59]
| Headline                              | Time   |      |
|---------------------------------------+--------+------|
| *Total time*                          | *4:27* |      |
|---------------------------------------+--------+------|
| Org Mode                              | 4:27   |      |
| \emsp Clocking work time              |        | 0:22 |
| \emsp GTD                             |        | 1:40 |
| \emsp TODO Capture - Refile - Archive |        | 0:34 |
#+END:
  CLOCK: [2015-11-23 সোম 18:39]--[2015-11-23 সোম 18:44] =>  0:05
  CLOCK: [2015-11-23 সোম 16:44]--[2015-11-23 সোম 18:30] =>  1:46
  :PROPERTIES:
  :Effort:   3:40
  :ORDERED:  t
  :END:
** Clocking work time                                                  :TIME:
   DEADLINE: <2016-01-12 মঙ্গল>
   CLOCK: [2015-11-23 সোম 18:20]--[2015-11-23 সোম 18:38] =>  0:18
    CLOCK: [2015-11-23 সোম 18:08]--[2015-11-23 সোম 18:12] =>  0:04
    :PROPERTIES:
    :Effort:   0:19
    :END:
    corresponding time interval is recorded. It also computes the total time spent on each subtree of a project.
    And it remembers a history or tasks recently clocked,
    so that you can jump quickly between a number of tasks absorbing your time.
    To save the clock history across Emacs sessions, use
    #+BEGIN_SRC elisp
      (setq org-clock-persist 'history)
      (org-clock-persistence-insinuate)
    #+END_SRC

    #+RESULTS:
    | org-clock-save | tramp-dump-connection-properties | ido-kill-emacs-hook | save-place-kill-emacs-hook | org-babel-remove-temporary-directory |

*** TEST Clock in/out C-c C-x C-i  C-c C-x C-o				    :CLOCKIN:
    CLOCK: [2016-01-05 মঙ্গল 19:54]--[2016-01-05 মঙ্গল 19:54] =>  0:00
*** TEST C-c C-x C-x (org-clock-in-last)
*** TEST C-c C-x C-e (org-clock-modify-effort-estimate)
*** TEST C-S-<up/down> (org-clock-timestamps-up/down)
     On CLOCK log lines, increase/decrease both timestamps so that the clock duration keeps the same.
     On CLOCK log lines, increase/decrease the timestamp at point and the one of the previous (or the next clock) timestamp by
*** DONE C-c C-t (org-todo)
    CLOSED: [2016-01-05 মঙ্গল 19:55]
    - CLOSING NOTE [2016-01-05 মঙ্গল 19:55] \\
      hello
     Changing the TODO state of an item to DONE automatically stops the clock if it is running in this same item.

*** TEST C-c C-x C-q (org-clock-cancel)
     Cancel the current clock. This is useful if a clock was started by mistake, or if you ended up working on something else.

*** TEST C-c C-x C-j (org-clock-goto)
     Jump to the headline of the currently clocked in task. With a C-u prefix arg, select the target task from a list of
     recently clocked tasks.

*** TEST C-c C-x C-d (org-clock-display)
     Display time summaries for each subtree in the current buffer. This puts overlays at the end of each headline, showing
     the total time recorded under that heading, including the time of any subheadings. You can use visibility cycling to
     study the tree, but the overlays disappear when you change the buffer (see variable org-remove-highlights-with-change) or
     press C-c C-c.
*** C-c C-x C-r (org-clock-report)
The clock table                                                      :TIME:
#+BEGIN: clocktable :maxlevel 2 :scope subtree
#+CAPTION: Clock summary at [2016-01-05 মঙ্গল 19:57]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |
#+END:


    Insert a dynamic block (see Dynamic blocks) containing a clock report as an Org mode table into the current file. When
    the cursor is at an existing clock table, just update it. When called with a prefix argument, jump to the first clock
    report in the current document and update it. The clock table always includes also trees with :ARCHIVE: tag.

** Creating timestamps
   - CLOSING NOTE [2016-01-05 মঙ্গল 19:58] \\
     abc
For Org mode to recognize timestamps, they need to be in the specific format. All commands listed
below produce timestamps in the correct format.
*** C -c . (org-time-stamp)
    <2015-11-23 সোম> Prompt for a date and insert a corresponding timestamp. When the cursor is at an existing
    timestamp in the buffer, the command is used to modify this timestamp instead of inserting a new
    one. When this command is <2016-01-05 মঙ্গল> used twice in succession, a time range is inserted. <2016-01-05 মঙ্গল>

*** C -c ! (org-time-stamp-inactive)
    Like C-c ., but insert an in<2016-01-09 শনি>active timestamp that will not cause an agenda entry.
*** C -u C-c .
*** C-u C-c !
    <2015-11-23 সোম 19:25>
    Like C-c . and C-c !, but use the alternative format which contains date and time. The default
    time can be rounded to multiples of 5 minutes, see the option org-time-stamp-rounding-minutes.

*** <2016-01-05 মঙ্গল> C -c < (org-date-from-calendar)
    Insert a timestamp<2015-11-23 সোম> corresponding to the cursor date in the Calendar.

***  S -<left> (org-timestamp-down-day)
***  S -<right> (org-timestamp-up-day)
    Change date at cursor by one day. These key bindings conflict with shift-selection and related
    modes (see Conflicts).

***  S -<up> (org-timestamp-up)
***  S -<down> (org-timestamp-down-down)
    Change the item under the cursor in a timestamp. The cursor can be on a year, month, day, hour or
    minute. When the timestamp contains a time range like ‘15:30-16:30’, modifying the first time will
    also shift the second, shifting the time block with constant length. To change the length, modify
    the second time. Note that if the cursor is in a headline and not at a timestamp, these same keys
    modify the priority of an item. (see Priorities). The key bindings also conflict with
    shift-selection and related modes (see Conflicts).

***  C -c C-y (org-evaluate-time-range)
    Evaluate a time range by computing the difference between start and end. With a prefix argument,
    insert result after the time range (in a table: into the following column).

** The date/time prompt
     3-2-5         ⇒ 2003-02-05
     2/5/3         ⇒ 2003-02-05
     14            ⇒ 2006-06-14
     12            ⇒ 2006-07-12
     2/5           ⇒ 2007-02-05
     Fri           ⇒ nearest Friday after the default date
     sep 15        ⇒ 2006-09-15
     feb 15        ⇒ 2007-02-15
     sep 12 9      ⇒ 2009-09-12
     12:45         ⇒ 2006-06-13 12:45
     22 sept 0:34  ⇒ 2006-09-22 00:34
     w4            ⇒ ISO week for of the current year 2006
     2012 w4 fri   ⇒ Friday of ISO week 4 in 2012
     2012-w04-5    ⇒ Same as above

** DEADLINES and SCHEDULING
***  DEADLINE
     Meaning: the task (most likely a TODO item, though not necessarily) is supposed to be finished on
     that date.

     On the deadline date, the task will be listed in the agenda. In addition, the agenda for today
     will carry a warning about the approaching or missed deadline, starting org-deadline-warning-days
     before the due date, and continuing until the entry is marked DONE. An example:

	       *** TODO write article about the Earth for the Guide
	       DEADLINE: <2004-02-29 Sun>
	       The editor in charge is [[bbdb:Ford Prefect]]

     You can specify a different lead time for warnings for a specific deadline using the following
     syntax. Here is an example with a warning period of 5 days DEADLINE: <2004-02-29 Sun -5d>. This
     warning is deactivated if the task gets scheduled and you set
     org-agenda-skip-deadline-prewarning-if-scheduled to t.

***  SCHEDULED
     Meaning: you are planning to start working on that task on the given date.

     The headline will be listed under the given date1. In addition, a reminder that the scheduled date
     has passed will be present in the compilation for today, until the entry is marked DONE, i.e., the
     task will automatically be forwarded until completed.

               *** TODO Call Trillian for a date on New Years Eve.
               SCHEDULED: <2004-12-25 Sat>

     If you want to delay the display of this task in the agenda, use SCHEDULED: <2004-12-25 Sat -2d>:
     the task is still scheduled on the 25th but will appear two days later. In case the task contains
     a repeater, the delay is considered to affect all occurrences; if you want the delay to only
     affect the first scheduled occurrence of the task, use --2d instead. See org-scheduled-delay-days
     and org-agenda-skip-scheduled-delay-if-deadline for details on how to control this globally or per
     agenda.
*** Inserting deadlines or schedules
****  C -c C-d (org-deadline)
    Insert ‘DEADLINE’ keyword along with a stamp. The insertion will happen in the line directly
    following the headline. Any CLOSED timestamp will be removed. When called with a prefix arg, an
    existing deadline will be removed from the entry. Depending on the variable org-log-redeadline2, a
    note will be taken when changing an existing deadline.



****  C -c C-s (org-schedule)
    Insert ‘SCHEDULED’ keyword along with a stamp. The insertion will happen in the line directly
    following the headline. Any CLOSED timestamp will be removed. When called with a prefix argument,
    remove the scheduling date from the entry. Depending on the variable org-log-reschedule3, a note
    will be taken when changing an existing scheduling time.

****  C -c / d (org-check-deadlines)
    Create a sparse tree with all deadlines that are either past-due, or which will become due within
    org-deadline-warning-days. With C-u prefix, show all deadlines in the file. With a numeric prefix,
    check that many days. For example, C-1 C-c / d shows all deadlines due tomorrow.

****  C -c / b (org-check-before-date)
    Sparse tree for deadlines and scheduled items before a given date.

****  C -c / a (org-check-after-date)
    Sparse tree for deadlines and scheduled items after a given date.

** Repeated tasks

Some tasks need to be repeated again and again. Org mode helps to organize such tasks using a
so-called repeater in a DEADLINE, SCHEDULED, or plain timestamp. In the following example

     ** TODO Pay the rent
        DEADLINE: <2005-10-01 Sat +1m>

the +1m is a repeater; the intended interpretation is that the task has a deadline on <2005-10-01> and
repeats itself every (one) month starting from that time. You can use yearly, monthly, weekly, daily
and hourly repeat cookies by using the y/w/m/d/h letters. If you need both a repeater and a special
warning period in a deadline entry, the repeater should come first and the warning period last:
DEADLINE: <2005-10-01 Sat +1m -3d>.

Deadlines and scheduled items produce entries in the agenda when they are over-due, so it is important
to be able to mark such an entry as completed once you have done so. When you mark a DEADLINE or a
SCHEDULE with the TODO keyword DONE, it will no longer produce entries in the agenda. The problem with
this is, however, that then also the next instance of the repeated entry will not be active. Org mode
deals with this in the following way: When you try to mark such an entry DONE (using C-c C-t), it will
shift the base date of the repeating timestamp by the repeater interval, and immediately set the entry
state back to TODO1. In the example above, setting the state to DONE would actually switch the date
like this:

     ** TODO Pay the rent
        DEADLINE: <2005-11-01 Tue +1m>

To mark a task with a repeater as DONE, use C-- 1 C-c C-t (i.e., org-todo with a numeric prefix
argument of -1.)

A timestamp2 will be added under the deadline, to keep a record that you actually acted on the
previous instance of this deadline.

As a consequence of shifting the base date, this entry will no longer be visible in the agenda when
checking past dates, but all future instances will be visible.

With the ‘+1m’ cookie, the date shift will always be exactly one month. So if you have not paid the
rent for three months, marking this entry DONE will still keep it as an overdue deadline. Depending on
the task, this may not be the best way to handle it. For example, if you forgot to call your father
for 3 weeks, it does not make sense to call him 3 times in a single day to make up for it. Finally,
there are tasks like changing batteries which should always repeat a certain time after the last time
you did it. For these tasks, Org mode has special repeaters ‘++’ and ‘.+’. For example:

     ** TODO Call Father
        DEADLINE: <2008-02-10 Sun ++1w>
        Marking this DONE will shift the date by at least one week,
        but also by as many weeks as it takes to get this date into
        the future.  However, it stays on a Sunday, even if you called
        and marked it done on Saturday.
     ** TODO Check the batteries in the smoke detectors
        DEADLINE: <2005-11-01 Tue .+1m>
        Marking this DONE will shift the date to one month after
        today.

You may have both scheduling and deadline information for a specific task. If the repeater is set for
the scheduling information only, you probably want the repeater to be ignored after the deadline. If
so, set the variable org-agenda-skip-scheduled-if-deadline-is-shown to repeated-after-deadline. If you
want both scheduling and deadline information to repeat after the same interval, set the same repeater
for both timestamps.

An alternative to using a repeater is to create a number of copies of a task subtree, with dates
shifted in each copy. The command C-c C-x c was created for this purpose, it is described in Structure
editing.

** GTD									:GTD:
   DEADLINE: <2015-11-23 সোম>
   CLOCK: [2015-11-23 সোম 15:05]--[2015-11-23 সোম 16:45] =>  1:40
 Book - Getting Things Done. The Art of Stress-Free Productivity
#+BEGIN: clocktable :maxlevel 2 :scope subtree
#+CAPTION: Clock summary at [2015-11-23 সোম 23:14]
| Headline     | Time   |      |
|--------------+--------+------|
| *Total time* | *2:10* |      |
|--------------+--------+------|
| \emsp GTD    |        | 2:10 |
#+END:

***  [[http://members.optusnet.com.au/~charles57/GTD/org_dates/index.html][GTD Tutorial]]
***  [[http://members.optusnet.com.au/~charles57/GTD/dit_nutshell.html][Do it Tomorrow]]
    CLOCK: [2015-11-23 সোম 22:31]--[2015-11-23 সোম 22:44] =>  0:13
#+BEGIN: clocktable :maxlevel 2 :scope subtree
#+CAPTION: Clock summary at [2015-11-23 সোম 23:14]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:30* |
|--------------+--------|
#+END:

    :PROPERTIES:
    :Effort:   0:20
    :END:
**** Fundamental principles
***** Have a clear vision of what you are actually trying to achieve.
The clearer your vision, the easier it will be to reach completion on the project or
goal. Define the vision as narrowly as possible which means defining what you are NOT
going to do or what you will leave out.
***** One thing at a time.
Do one thing at a time. The old Zen saying applies: When you are chopping wood, chop
wood. When you are carrying water, carry water. Work on one thing at a time and devote
you full attention to the task at hand.
***** Little and often.
It is easier to get things done if you do a little bit frequently (usually daily) rather
than attempting a large chunk of work infrequently. Little and often is the basis of
learning a musical instrument, learning a language or getting fit.

Little and often allows the brain to assimilate new information and experiences, make
connections and come up with ideas and new insights. Another term for "little and often"
is Spaced Repetition.
***** Set Limits
Our creativity is at its best when it operates within defined limits. Consider what
limits you want for the task at hand, and this will lead to better focus.

Another aspect of limits is TIME. You will achieve more if you set a limit on how much
time you will spend on a task. Try working in timed bursts, using a kitchen timer (or
other timing device) to set a limit of 45 minutes. Then you work with full attention for
45 minutes and take a break.
***** Closed Lists
The Closed List is a replacement for the old fashioned "to-do list" which was really a
"wish to do list".

A Closed List is a list with a line drawn at the bottom so nothing can be added to the
list. Closing the list establishes a boundary on your work, and marking everything off
gives satisfaction and positive reinforcement.

Prioritising you work is not necessary as you do everything on your list for your day,
so the order doesn't matter.

The simplest implementation is a page-per-day diary.
***** Reduce Random Factors.
Everything we do that wasn't planned for the day is a random factor. Having too many
random factors means you won't achieve what you are trying to do.

***** Commitment or Interest
You need to be really committed to doing something in order to get results. Rather than
just being "interested" in writing, you need a commitment of "writing an article each
month for my newsletter".
****** It is possible to only carry a certain number of commitments
in order to do them properly. It is important to follow these commitments to the best
of your activity and do them properly, otherwise you might as well not do them at all.
****** Work ultimately comes from the commitments we have made with ourselves and others.
If you have too much work to do, then you need to renegotiate your commitments to get rid
of some of them. This is why prioritising your work is irrelevant. You are either going
to do a commitment or you aren't.
***** When you take on a commitment you are choosing to do it properly.
It is better to do a few thinsg really well than a lot of things badly. So how do you
choose what to do? Ask yourself if the commitment will advance your processional or
personal life in the direction you want.

****** Never say yes to anything unless you can say it whole-heartedly.
**** Prioritising and Urgency
     CLOCK: [2015-11-23 সোম 22:44]--[2015-11-23 সোম 23:01] =>  0:17
     :PROPERTIES:
     :Effort:   0:14
     :END:
The DIT system creates a buffer zone between random inputs and your daily plans by using
the daily closed list. Rather than immediately responding to every request, random idea,
phone call, visitor, email and personal interruption, you make a decision about the
urgency of the random event.
There are really only three levels of urgency:

***** Immediate

You have to drop what you are doing and respond immediately. Obviously this sort of
interruption is NOT written down on your closed list. How much of your job or personal
has to work like this? Very little actually.

***** Same Day

This level of response is not immediate but sometime during the day. There is no need to
respond immediately as the interruption is not life-threateningly urgent. Don't turn
this level of interruption into the immediate level of urgency!

Write down the new request on your closed list. It will be written down under the ruled
line because the list got closed following the planning of today's activities. Writing
it down will help clarify your thinking about the priority.

***** Tomorrow

This is the ideal place to park items on your lists and works best for planning your
day. As you plan your next day you know about this item and can action it at the most
appropriate time.

Adding an item to the tomorrow list is ensuring you are not giving the item an
unnecessarily high level of importance. You don't want to fall into the trap of always
working on the latest interruption.

***** The Closed List

The closed list is a type of "To Do" list that has a clearly defined boundary. As you
start the day, you rule a line across the list to represent your plan for the day. As
you get interruption you try to add those to the list of tomorrow, otherwise you
(relucantly!) add them to today's list under the ruled line. Writing it down makes you
think about whether to do the task today or tomorrow.

Your goal each day is to complete all the items above the line, as well as the same day
items written below the line. If you can consistently complete everything on your list,
then you have a good idea how much work you can achieve a day.

Following this methodology you will have a system for dealing with interruptions as well
as planning what you do today.

Make sure you write down everything you do during the day so when you review your daily
lists you can see how much work you do each day. The end of the week is a good time to
review the daily closed lists and this forms part of my weekly review.

The beauty of writing things done on the closed list for tomorrow is that it allows you
to group similar activities and action them together. This is much more efficient than
handling them as they turn up at random.

***** The Task Diary

The Task Diary is a set of daily, dated pages where you write your Closed List. As you
start each day, you work with a list prepared yesterday. A rule line indicates the end
of the planned items for the day.

I like to cross out completed items using a highlighter pen, so I can still read the
description of completed items. Using a highlighter has a similar feel to colouring in a
picture and makes the process of completing items seem like a fun activity.

Use a separate calendar system for your scheduled activities.

In summary the task diary is a "will do" list with the aim of completing everything
written on a page on that day. Every additional task you do is written on the closed
list for the day.

The first item on the Closed List should be the current initiative.

***** Daily and Weekly Routine

How do you track the regular items you do each day or week? Rewriting in the task diary
can be annoying and tedious, so an alternative is to print a daily checklist. These
checklists can be used in conjunction with the daily closed list (task diary).

An alternative is to have some sort of weekly timetable with space to mark off the
things you need to do every morning, evening, or whenever. Using my example of learning
a new word (from the dictionary) each weekday, I put this on my weekly checklist.

***** Current Initiative

This is a special activity you work on FIRST before you work through your lists. The
idea of a current initiative is to get started on a project, finish something off, or
major tidying up or reorganising. The current initiative is something you do first every
day. The principle could be applied to something you do every evening after dinner, for
example, reorganising bookshelves or sorting out a filing cabinet.

A current initiative should only need a few sessions to complete, and then you can
choose another initiative. Clearing a backlog is a good example of a current initiative,
for example spending 15 minutes every morning first thing to clear the baclog of email
after a holiday.

You may want to keep a list of current initiatives so when you have completed one of
them, move on to the next.

**** Getting overwhelmed

What do you do if you are unable to complete these lists? A closed list for the day
should represent the work you can do in a day. Each day we collect new work that needs
to be actioned, and typically we add this to tomorrow's list. Some of the work gets
added to today's list and actioned along with the planned work.

But what do we do when we can't keep up? If you can't complete your list for more than
three days in a row, conduct an audit.

There are three main reasons for not completing the lists:

1. You are not working efficiently.

What is your processing speed?

How much work did you do today that wasn't written down on your list?

Solution: Work in closed lists and group similar work together. This should help
maximise you concentration and maintain focus. Avoid doing things that aren't on your
list for the day.

2. You have too much to do.

There is a limit to how much one person can do!

Solution: Cut back on your commitments. Review your list of current commitments - active
projects and the roles you perform. What are the most important things you should be
doing that advance your career, personal goals and values.

3. You are not leaving enough time.

Remember your future diary pages already have the commitments of daily living. Just
because you have no scheduled activities doesnt' mean you have nothing to do!

Remedy: Don't over commit your time and leave time for yourself.

Keeping Going - Persistence

Procrastination is often a paralysis caused by the thought of having so much work to do
and not knowing what to do next.

1. Reward yourself for completing your daily lists.

Completing the daily closed lists gives positive reinforcement and a good feeling of
achievement. Reward yourself each week for the number of days you completed everything
on the list.

2. Using timed bursts.

Timed bursts are good for breaking procrastination. Set the timer for 12 minutes and
work hard, then have a 3 minute break. Repeat 3 more times and you will have done 48
minutes quality work in 1 hour. If the task is particularly odious, use a time of 5
minutes. After the time is up you can decided whether to repeat the 5 minute burst.

3. Taking breaks.

When you take a break make sure you have started something just before the break. The
human mind doesn't like to leave things incomplete so when you return from the break you
will be motivated to conitnue working. It is much harder to get enthusiastic about a new
task after a pleasant break.

Never take a break until you have started the next thing.

4. Keeping track of how you feel

Every day ask yourself "Do do I feel?". Give yourself a score out of 10 and keep this
information in a journal along with any comments. After a while you will define what it
means to "feel good" as well as discovering what makes you feel good.

5. Tricks

There are many tricks you can use to fool your rational mind to overcome resisting some
tasks. For example, if you need to write an essay you might say out loud "I am not going
to write my essay, but I will read some notes and write two sentences".

Choosing the descriptions of the tasks can put a new spin, for example using the word
"Just": "I will just get this file out". I procrastinate over doing things associated
with personal finance. A good strategy for preparing a budget would be "I will just
summarise the insurance policy premiums for next year".

Projects

A project is something you want to do that is going to take more than one session of
work to complete. Reorganising a filing cabinet is most likely a project because it will
take more than one session to complete.

There are two types of projects:

1. Continuous projects.

This kind of project consists of a repeating a small number of tasks over a relatively
long period of time. For example, learning a language, practicing a musical instrument
or getting fit.

Sometimes the project has a definite goal (passing an examination, publishing a book)
but often the repetitive action is the goal (staying fit).

Continuous projects need to become a daily habit. This can be done on the Closed List or
the daily checklists.

2. Organisational projects.

These are a series of different tasks leading to a specific goal, for example organising
a wedding, or planning a holiday. A good way to organise these projects is to break it
down into a set of tasks. Drawing a Mind Map is a great way of exploring what needs to
get done.

The tasks are then added to the Closed Lists. You can add reviewing and planning type
tasks to the closed lists, for example "Plan the next stage of the XXX project".

Instead of trying to prioritise projects, do the LEAST important part first. This is a
lot easier than leaving the task so long until you have a panic situation.

*** Good bye To-Do lists, hello Next Actions
    Instead of making lists of things to do, two questions are asked about
    each item:
**** What is the desired outcome?
**** What is the next physical action I can take to get closer to this outcome?

*** Contexts
**** *Office* (I use this for phone calls to be made during business hours)
**** *Home* (this context is also used for phone calls
**** *Computer* (home computer)
**** *DVD* Watching (I borrow a lot of DVDs from the library)
**** *Reading* (this gets done on my train trip to work)
*** Agendas
The GTD methodology uses many lists such as the Next Action lists
described in the previous section. David Allen uses the term "Agendas"
to describe lists of actions you need to discuss with particular
people or to raise at a regular meeting. Agendas can be thought of as
a special form of next action list.

For example, if you have a regular meeting with your boss, you can
create a list called Boss recording items to discuss when you next
meet. If you are manager, you could created agendas for each of the
people in your team.

*** Waiting For
Another type of list is a "Waiting For" list. Often when you complete
a next action or delegate an action, you need to wait for a response.
Writing this information on a "Waiting For" list is a useful reminder.

*** Projects
**** Outcome that requires more than one several NextAction
A Project is an outcome that requires more than one several Next
Action steps to be completed. When reviewing the things you need to
get done, think in terms of the desired outcome and as many of the
Next Actions as you can. It is not necessary to think of all of the
Next Actions you need to take, but enough to get started.
***** example
an outcome of "Dinner Party" is a project. Some of the
Next Actions would have a "Phone" context: "Ring Bill and Hilary",
"Ring Valerie and Mark". Under the "Shopping" context, there could be
next actions for "Buy maxicun burger and pizza with lot of paparony".
**** Make a list of your active projects
use as a checklist during your weekly review.
This will ensure that you are creating next actions for each of your projects,
and approaching completion on each of your projects.
*** Calendar
Calendars are used to record date-specific or date and time specific
information only. Calendars are not used to write to-do lists as
encouraged in the old style of planners. The calendar is a place for
recording appointments, meetings and date-specific information (for
example, birthdays).

*** Tickler File
This a system to store forward-dated action items. Often this takes
the form of 43 folders (12 months + 31 days), although a software
based system is feasible. For example a bill requiring payment on the
20th of the current month would be filed in the folder labelled "20".
The list of Christmas card recipients would be filed in the "December"
folder.

*** Someday/Maybe
You can't do everything now, so the Someday/Maybe List is used to
record ideas about things you would like to do but don't want to
schedule them now or make further progress. This list is frequently
updating during the Weekly Review. Items on the list may become active
projects, or conversely, you may decide to de an active project or
Next Action to a later date.

*** What do I do now?
Deciding what to do next is going to be based on context, how much
time you have available and your energy level. Because your Next
Action lists are reviewed at the Weekly Review, you have a means of
directing your activity during the week. When you are at home, you can
review the HOME list without being distracted by items in OFFICE
context.

*** Weekly Review
The heart of the GTD process is a weekly review of all projects, Next
Action lists, Waiting for Items. Each project is checked to ensure
that a next action has been defined.
*** Mind Sweep
The goal of GTD is to get everything out of your mind into an
external, trusted system. This will maximmise the readiness of your
mind to gain focus on getting things done.

** tutorial
***  Add the following to your .emacs:
(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
*** DONE  overview of your document by pressing shift-TAB.
***  Org-mode global TODO
(setq org-agenda-files (list "~/org/work.org"
                             "~/org/school.org"
                             "~/org/home.org"))

***  The global TODO list
Press C-c a t to enter the global todo list. Org-mode will scan the
files in org-agenda-files and present a listing of all the open TODO
items:

tutorial-16.png

You can move the cursor around to the different todo items, and hit
"t" to mark an item DONE, or hit RET to jump to the source file where
the  is located.

***  Scheduling tasks and using the agenda
    DEADLINE: <2015-11-10 মঙ্গল> SCHEDULED: <2015-11-10 মঙ্গল>
****  Let's say I want to schedule "Finish document" for today.
     SCHEDULED: <2015-11-23 সোম>
*****  move cursor to TODO hit C-c C-s to run org-schedule.
      SCHEDULED: <2015-11-23 সোম>
*****  hit C-c a a for org-agenda.
      SCHEDULED: <2015-11-23 সোম>
**** Now press "l" (lowercase L) to turn on log display. This displays the
all finished tasks and their completion times.

tutorial-15.png

**  tables
   SCHEDULED: <2015-11-23 সোম>
***  [[http://orgmode.org/worg/org-tutorials/org-spreadsheet-lisp-formulas.html][org spread sheet]]
*** DONE make a tabe then Now type C-c } to display the table's coordinates.
*** DONE add formula C-c =
| first | last | mail             | Maths | French | Mean    |
|-------+------+------------------+-------+--------+---------|
| jon   | de   | jon.de@emacs.edu |    12 |     16 | jon:14  |
| ash   | br   | ash.br@emacs.edu |   623 |      3 | ash:313 |
| fn    | de   | fn.de@emacs.edu  |     3 |      f | fn:1    |
| an    | bd   |                  |     4 |      5 |         |
| d     | adsf |                  |    34 |      0 |         |
| dsf   | kj;  |                  |     3 |      3 |         |
|       |      |                  |       |        |         |
#+TBLFM: $3='(concat $1 "." $2 "@emacs.edu")::$6='(concat $1 ":" (number-to-string (/ (+ (string-to-number $4 ) (string-to-number $5 ) ) 2)))

** TODO Inserting deadlines or schedules
   DEADLINE: <2016-01-12 মঙ্গল>
The following commands allow you to quickly insert1 a deadline or to schedule an item:
*** C-c C-d     (org-deadline)
Insert ‘DEADLINE’ keyword along with a stamp. The insertion will happen in the line directly following the headline. Any CLOSED timestamp will be removed. When called with a prefix arg, an existing deadline will be removed from the entry. Depending on the variable org-log-redeadline2, a note will be taken when changing an existing deadline.
*** C-c C-s     (org-schedule)
Insert ‘SCHEDULED’ keyword along with a stamp. The insertion will happen in the line directly following the headline. Any CLOSED timestamp will be removed. When called with a prefix argument, remove the scheduling date from the entry. Depending on the variable org-log-reschedule3, a note will be taken when changing an existing scheduling time.
*** C-c / d     (org-check-deadlines)
Create a sparse tree with all deadlines that are either past-due, or which will become due within org-deadline-warning-days. With C-u prefix, show all deadlines in the file. With a numeric prefix, check that many days. For example, C-1 C-c / d shows all deadlines due tomorrow.
*** C-c / b     (org-check-before-date)
Sparse tree for deadlines and scheduled items before a given date.
*** C-c / a     (org-check-after-date)
Sparse tree for deadlines and scheduled items after a given date.
Note that org-schedule and org-deadline supports setting the date by indicating a relative time: e.g., +1d will set the date to the next day after today, and –1w will set the date to the previous week before any current timestamp.
* dired
*** DONE /ssh:asik@23.227.183.105:/usr/local/src/clientvoting/
* Theme
** M-x load-theme RET - leuven
** https://github.com/bbatsov/zenburn-emacs
* Tutorials
**  [[http://daemianmack.com/magit-cheatsheet.html][magit cheatsheet]]
** [[https://www.youtube.com/watch?v=0cZ7szFuz18][Andrea Crotti - Emacs and shell as your best friends]]
** [[http://emacsredux.com/][emacs redux]]
** [[http://pragmaticemacs.com][pragmatice emacs]]
** https://www.youtube.com/watch?v=Mxpp91jo27A&index=6&list=PLC43A28510793F9D8 Bookmark
** https://www.youtube.com/watch?v=fgizHHd7nOo

* Utils
** Bash Compilation
*** [[https://github.com/szermatt/emacs-bash-completion][emacs bash compilation]]
**** bash-completion.el defines dynamic completion hooks for shell-mode and
    shell-command prompts that are based on bash completion.

**** Bash completion for emacs:
***** is aware of bash builtins, aliases and functions
***** does file expansion inside of colon***separated variables
    and after redirections (> or <)
***** escapes special characters when expanding file names
***** is configurable through programmable bash completion

When the first completion is requested in shell model or a shell
command, bash-completion.el starts a separate bash
process.  Bash-completion.el then uses this process to do the actual
completion and includes it into Emacs completion suggestions.

A simpler and more complete alternative to bash-completion.el is to
run a bash shell in a buffer in term mode(M-x `ansi-term').
Unfortunately, many Emacs editing features are not available when
running in term mode.  Also, term mode is not available in
shell-command prompts.

**** INSTALLATION

***** copy bash-completion.el into a directory that's on Emacs load-path
***** add this into your .emacs file:

          (autoload 'bash-completion-dynamic-complete
            "bash-completion"
            "BASH completion hook")
          (add-hook 'shell-dynamic-complete-functions
            'bash-completion-dynamic-complete)

    or simpler, but forces you to load this file at startup:

          (require 'bash-completion)
          (bash-completion-setup)

***** reload your .emacs (M-x `eval-buffer') or restart

Once this is done, use <TAB> as usual to do dynamic completion from
shell mode or a shell command minibuffer, such as the one started
for M-x `compile'. Note that the first completion is slow, as emacs
launches a new bash process.

You'll get better results if you turn on programmable bash completion.
On Ubuntu, this means running:

    sudo apt-get install bash-completion

and then adding this to your .bashrc:

    . /etc/bash_completion

Right after enabling programmable bash completion, and whenever you
make changes to you .bashrc, call `bash-completion-reset' to make
sure bash completion takes your new settings into account.

Loading /etc/bash_completion often takes time, and is not necessary
in shell mode, since completion is done by a separate process, not
the process shell-mode process.

To turn off bash completion when running from emacs but keep it on
for processes started by bash-completion.el, add this to your .bashrc:

    if [[ ( -z "$INSIDE_EMACS" || "$EMACS_BASH_COMPLETE" = "t" ) &&\
         -f /etc/bash_completion ]]; then
      . /etc/bash_completion
    fi

Emacs sets the environment variable INSIDE_EMACS to the processes
started from it. Processes started by bash-completion.el have
the environment variable EMACS_BASH_COMPLETE set to t.

**** CAVEATS

Using a separate process for doing the completion has several
important disadvantages:

- bash completion is slower than standard emacs completion
- the first completion can take a long time, since a new bash process
  needs to be started and initialized
- the separate process is not aware of any changes made to bash
  in the current buffer.
  In a standard terminal, you could do:

        $ alias myalias=ls
        $ myal<TAB>

  and bash would propose the new alias.
  Bash-completion.el cannot do that, as it is not aware of anything
  configured in the current shell. To make bash-completion.el aware
  of a new alias, you need to add it to .bashrc and restart the
  completion process using `bash-completion-reset'.

**** COMPATIBILITY

bash-completion.el is known to work on Emacs 22 through 24.4 under
Linux and OSX. It does not works on XEmacs.

*** .emacs.d/emacs-bash-completion
** [[http://unix.stackexchange.com/questions/104325/what-is-the-difference-between-shell-eshell-and-term-in-emacs][What is the difference between shell, eshell, and term in Emacs]]
* Lisp
** Remove Menu bar, tool bar, start up messages
#+NAME: starter-kit-remove_unnecessary
#+BEGIN_SRC emacs-lisp
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1))
  (setq inhibit-startup-message t)
#+END_SRC
** Truncate Line
#+NAME: starter-kit-truncate
#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines nil)
#+END_SRC

#+RESULTS: starter-kit-truncate
: t

** find file
#+BEGIN_SRC elisp
(defun gtd ()
  (interactive)
  (find-file "~/org/gtd.org")
  )
#+END_SRC

#+RESULTS:
: gtd

** For troubled network auto save frequently
#+BEGIN_SRC elisp
(setq auto-save-interval 1
          auto-save-timeout 1)
#+END_SRC

#+RESULTS:
: 1




*** Automatically save your changes after an customizable interval
I really like this idea, because it’s dumb to make me hit C-x C-s all the time because of technical details of the computer’s architecture, and almost everything I edit is under version control anyway. I like using auto-save-hook, and that seems to work well, but I want to save all the buffers, because if I switch away from a buffer before it autosaves, I want it to get saved when things next get saved after that. So I combined parts of the two above solutions (this is the first elisp code I’ve written, could have glaring problems)
#+BEGIN_SRC elisp
  (defun full-auto-save ()
    (interactive)
    (save-excursion
    (dolist (buf (buffer-list))
      (set-buffer buf)
      (if (and (buffer-file-name) (buffer-modified-p))
          (basic-save-buffer)))))
(add-hook 'auto-save-hook 'full-auto-save)
#+END_SRC
** Color Theme
- Colur Themes
#+NAME: starter-kit-set-color-theme
#+BEGIN_SRC emacs-lisp
(require 'color-theme)
(setq color-theme-is-global t)
;; (color-theme-initialize)


(load "color-theme-zenburn")
(load "color-theme-tangotango")
;;(load "color-theme-ujelly")


(setq ash-color-themes (list
  'color-theme-tangotango
  'color-theme-zenburn
))

(defun ash-theme-set-default () ; Set the first row
      (interactive)
      (setq theme-current ash-color-themes)
      (funcall (car theme-current)))

(defun ash-describe-theme () ; Show the current theme
  (interactive)
  (message "%s" (car theme-current)))

   ; Set the next theme (fixed by Chris Webber - tanks)
(defun ash-theme-cycle ()
  (interactive)
  (setq theme-current (cdr theme-current))
  (if (null theme-current)
      (setq theme-current ash-color-themes))
  (funcall (car theme-current))
  (message "%S" (car theme-current)))

(setq theme-current ash-color-themes)
(setq color-theme-is-global nil) ; Initialization
(ash-theme-set-default)
(global-set-key [f4] 'ash-theme-cycle)
#+END_SRC

** Keyboard Macro
*** f3 start
*** f4 end
*** c-x e - execute
*** c-x c-k SPC - debug
*** c-x c-k n - name exp name: abc_mac
*** in .emacs.d - insert-kbd-macro abc_mac
*** repeat infinate c-u 0 c-x e
*** recent commands c-x c-k l
*** Find Macro Libarary
M-x find-library RET kmacro
M-x find-library RET edmacro
* Find Libarary
M-x find-library RET kmacro
M-x find-library RET edmacro
