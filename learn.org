#+TAGS: CLOCKIN(k) SUDO(s) CLIPBOARD(c) TRUNCATE(e)
#+SEQ_TODO: TODO TEST DONE
* Tutorial
** Text manipulation
** Rectangle Mode
*** Delete "C-x r d"
*** rectangle-mark-mode
*** cua-resize-rectangle-right
** Regex
*** Syntax
**** Double Quate
     CLOSED: [2015-11-23 সোম 22:07]
| PatternMatches                                  |
| "\([^"]+\)" capture text between double quotes. |
| "hello world"                                   |

*** Matching Newline ＆ Tab
**** To enter a new line, press 【Ctrl+q Ctrl+j】
**** To enter a Tab character, press 【Ctrl+q Tab ↹】
***  Boundary anchors
| \`…                           |
| Beginning of {string, buffer} |
| …\'                           |
| End of {string, buffer}       |
| \b                            |
| word boundary marker          |

** Clipboard [2/3]                                                :CLIPBOARD:
  - [ ] Meta clipboard-kill-ring-save
  - [X] clipboard-kill-region
  - [X] clipboard-yank
** M-x RET set-variable RET
** Cursor Movement and Location [16/16]
        - [X] arrow keys (if available)N/AMove cursor.
        - [X] C-abeginning-of-lineMove to beginning of line.
        - [X] C-eend-of-lineMove to end of line.
        - [X] C-fforward-charMove forward one character.
        - [X] C-bbackward-charMove backward one character.
        - [X] M-f forward-wordMove󿿿 forward one word.
        - [X] M-bbackward-wordMove backward one word.
        - [X] C-nnext-lineMove down a line (creating the next line, if necessary).
        - [X] C-pprevious-lineMove up a line.
        - [X] M-r move-to-window-lineMove to left margin, vertically centered in window.
        - [X] M-<beginning-of-bufferMove to top of buffer.
        - [X] M->end-of-bufferMove to end of buffer.
        - [X] M-x goto-chargoto-charRead a number and go to that buffer position (start = 1).
        - [X] M-x goto-line goto-line Read a number and go to that line (first line = 1).
        - [X] M-=count-lines-regionPrint number of lines in current region.
        - [X] C-x =what-cursor-postitionPrint character code, character position and column of the cursor location.
        - [ ] Setting Mark C-@ -> (c shfit 1 )
        - [ ] C-w . . Kill region. This deletes and puts the region into the kill ring.
        - [ ] C-y . . Yank. This inserts the last snippet from the kill ring.
        - [ ] M-y . . Cycle kill ring. Immediately after C-y, this replaces the yanked part by the other snippets in the kill ring.
        - [ ] M-w . . Save region into kill ring. Like C-w, but doesn't delete.
        - [ ] In short, you start selection like usual with C-spc, then kill region with C-x r k and paste/yank killed block with C-x r y
        - [ ] C-x b buffer RET
        - [ ] C-x 4 buffer RET - another window ( switch-to-buffer-other-window )
        - [ ] C-x 4 b buffer RET another frame
** Evaluate all code chunks below current header
It sounds like you want org-babel-execute-buffer or org-babel-execute-subtree (C-c C-v s).
** Emacs in Bash
emacs --batch --load ~/.emacs \
      --eval "(progn (require 'org-mobile) (org-mobile-push))"
** org updown M-S-<up> and M-S-<down>
* Lisp
** Elisp Cookbook
*** String
#+BEGIN_SRC elisp
(zerop (string-match "" ""))
(string-equal "A" "A")
(equal "AAA" "AAA")
(zerop (length "  "))
(length "  ")
(eq ""  "")
(eq "" (purecopy ""))
(eq "" (propertize "" 'face 'italic))
#+END_SRC

#+RESULTS:
: t

*** tutorial
#+BEGIN_SRC emacs-lisp
;;; test.el starts here

(defun ev(n) (if (= (% n 2) 0) "even" "odd"))
;;; C-u C-M-x C-u C-M-x
(defun hello(name)
  (let ((name (upcase name))) (message "Hello, %s!" name)))
(defun pick-a-word (n)
  (cond
   ((= n 1) "one")
   ((= n 2) "two")
   (t "hello")))

(defun factorial (n)
  (if (< n 1) 1 (* n (factorial (- n 1)) )))

(defun qs (list)
  (if (null list)
      '()
    (let* (pivot (car list))
      (rest (cdr list))
      (lesser (remove-if-not
               (lambda (x) (<= x pivot)) rest ))
      (greater (remove-if-not (lambda (x) (> x pivot) ) rest))
      (append (qs lesser) '( pivot) (qs greater))
      )))
(global-set-key (kbd "M-e") 'sort-lines)

(add-hook 'c-mode-common-hook (lambda () (local-set-key (kbd '<f5>) 'recompile)))
(defun insertlinebefor ()
  "insert line before"
  (interactive)
  (save-excursion (move-beginning-of-line 1)(newline)))
(global-set-key (kbd "C-S-m") 'insertlinebefor)

#+END_SRC
*** String vs Buffer txt
**** Substring
#+BEGIN_SRC elisp
  (substring "abcdefg" 0 3)
  (substring "abcdefg" -3 -1)
  (with-temp-buffer (insert "abcdefg")
                    (buffer-substring 2 4))
#+END_SRC
**** Start-with and ends-with predicates
#+BEGIN_SRC elisp
    (defun string/ends-with (s ending)
      " Return non-nil if string S ends with ENDING."
      (cond ((>= (length s)  (length ending))
             (let ((elength (length ending)))
               (string= (substring s (- 0 elength)) ending)))
            (t nil)))
    (string/ends-with "hello" "ll")
    (defun string/starts-with (s begins)
      "Return non-nil if string S starts with BEGINS."
      (cond ((>= (length s) (length begins))
             (string-equal (substring s 0  (length begins)) begins))
            (t nil)))
        (string/starts-with "ABC" "A")
      (defun string/ends-withmac (string suffix)
      "Return t if STRING ends with SUFFIX."
      (and (string-match (rx-to-string `(: ,suffix eos) t) string) t))
      (string/ends-withmac "hello" "llo")

    (defun string/starts-with (string prefix)
    "Return t if STRING starts with prefix."
    (and (string-match (rx-to-string `(: bos ,prefix) t) string) t))
#+END_SRC
**** Processing characters
#+BEGIN_SRC elisp
  (defun string/reverse (str)
    "Reverse the str where str is a string"
    (apply #'string (reverse (string-to-list str))))
(string/reverse "hello World")
#+END_SRC
**** Looking at characters in a temporary buffer
#+BEGIN_SRC elisp
  (with-temp-buffer
    (insert "abcdefg")
    (goto-char (point-min))
    (while (not (= (char-after) ?b)) (forward-char)) (point))
#+END_SRC
**** Trim whitespace
#+BEGIN_SRC elisp
(setq test-str "abcdefg   ")
(when (string-match "[ \t]*$" test-str)
(message (concat "[" (replace-match "ABC" nil nil test-str) "]")))
#+END_SRC
** Test
#+BEGIN_SRC elisp
;;; test.el starts here

(defun ev(n) (if (= (% n 2) 0) "even" "odd"))
;;; C-u C-M-x C-u C-M-x
(defun hello(name)
  (let ((name (upcase name))) (message "Hello, %s!" name)))
(defun pick-a-word (n)
  (cond
   ((= n 1) "one")
   ((= n 2) "two")
   (t "hello")))

(defun factorial (n)
  (if (< n 1) 1 (* n (factorial (- n 1)) )))

(defun qs (list)
  (if (null list)
      '()
    (let* (pivot (car list))
      (rest (cdr list))
      (lesser (remove-if-not
               (lambda (x) (<= x pivot)) rest ))
      (greater (remove-if-not (lambda (x) (> x pivot) ) rest))
      (append (qs lesser) '( pivot) (qs greater))
      )))
(global-set-key (kbd "M-e") 'sort-lines)

(add-hook 'c-mode-common-hook (lambda () (local-set-key (kbd '<f5>) 'recompile)))
(defun insertlinebefor ()
  "insert line before"
  (interactive)
  (save-excursion (move-beginning-of-line 1)(newline)))
(global-set-key (kbd "C-S-m") 'insertlinebefor)

#+END_SRC
** find file
#+BEGIN_SRC elisp
(defun gtd ()
  (interactive)
  (find-file "~/org/gtd.org")
  )
#+END_SRC

#+RESULTS:
: gtd

** For troubled network auto save frequently
#+BEGIN_SRC elisp
(setq auto-save-interval 1
          auto-save-timeout 1)
#+END_SRC

#+RESULTS:
: 1

*** Automatically save your changes after an customizable interval
I really like this idea, because it’s dumb to make me hit C-x C-s all the time because of technical details of the computer’s architecture, and almost everything I edit is under version control anyway. I like using auto-save-hook, and that seems to work well, but I want to save all the buffers, because if I switch away from a buffer before it autosaves, I want it to get saved when things next get saved after that. So I combined parts of the two above solutions (this is the first elisp code I’ve written, could have glaring problems)
#+BEGIN_SRC elisp
  (defun full-auto-save ()
    (interactive)
    (save-excursion
    (dolist (buf (buffer-list))
      (set-buffer buf)
      (if (and (buffer-file-name) (buffer-modified-p))
          (basic-save-buffer)))))
(add-hook 'auto-save-hook 'full-auto-save)
#+END_SRC
** Keyboard Macro [8/9]                                               :MACRO:
        - [X] f3 start
        - [X] f4 end
        - [X] c-x e - execute
        - [X] c-x c-k SPC - debug
        - [X] c-x c-k n - name exp name: abc_mac
        - [X] in .emacs.d - insert-kbd-macro abc_mac
        - [X] repeat infinate c-u 0 c-x e
        - [X] recent commands c-x c-k l
** Line Truncate                                                   :TRUNCATE:
*** Elisp Command
Note: Need to reset Emacs to get truncate effect
or use [[Command]] directly
#+BEGIN_SRC elisp
(setq-default truncate-lines nil)
#+END_SRC
#+RESULTS:
*** Command
****  M-x set-variable truncate-lines nil.
** How can I set a deadline on TODO for the last weekday of the month
#+BEGIN_SRC elisp
(defun last-working-day-deadline ()
  (interactive)
  (let* ((date (calendar-current-date))
  (day (calendar-extract-day date))
  (month (calendar-extract-month date))
  (year (calendar-extract-year date))
  (lastday (calendar-last-day-of-month month year)))
  ;; workdays have "names" of 1 2 3 4 or 5
  (while (not (memq (calendar-day-of-week (list month lastday year)) '(1 2 3 4 5)))
  (decf lastday))
 (org-deadline nil (format "%s-%s-%s" year month lastday))))
#+END_SRC
** show the Org-mode agenda on Emacs start-up
(add-hook 'after-init-hook 'org-agenda-list)
* Find Libarary
M-x find-library RET kmacro
M-x find-library RET edmacro
* Haskell
#+BEGIN_SRC haskell
   increasing :: (Ord a) => [a] -> Bool
   increasing [] =  True
   increasing [x] = True
   increasing (x:y:ys) = x <= y && increasing(y:ys)
   increasing [5]
#+END_SRC

#+RESULTS:
: Prelude Data.List System.IO System.Process>
: <interactive>:250:1: Not in scope: ‘increasing’
* Wrap
#+NAME: wrap
#+BEGIN_SRC elisp :var snippet="" :var process="" :var file="" :var post=post_cmd[0](process,file)
  (with-temp-buffer
    (insert "#+NAME: ")
    (insert snippet)
    (insert "\n")
    (insert "#+BEGIN_SRC python :session :noweb yes")
    (insert post)
    (insert "\n")
    (insert "\"\"\"\n<<")
    (insert snippet)
    (insert ">>\n\"\"\"\n")
    (insert "#+END_SRC")
    (buffer-string))
#+END_SRC

#+BEGIN_SRC elisp :var snippet="abc" :var process="txt" :var file="abc.txt" :var post=post_cmd[0] :restuls output
  (with-temp-buffer
    (cond  ((eq process  "aync")
              (concat snippet "_" "aync")
              (concat post ":post cmdaync(*this*)"))
             ((eq process  "fwrite" )
              (concat snippet "_" "aync")
              (concat ":post fwrite("  "\"" file "\"" "," "*this*"))
             (t (concat snippet "_" "txt")))
    (insert snippet)
    (insert "\n")
    (insert post)(buffer-string))
#+END_SRC

#+RESULTS:
: abc


#+NAME: wrap
#+BEGIN_SRC js :var snippet="abc" :var process="txt" :var file="del" :var post=""  :results raw
  var gen_post = function () {
      if (process === "aync") {
          return ":post " + "cmdaync" +  "(" + "*this*" + ")";
      }
      if (process === "fwrite"){
          return ":post " + "fwrite" + "(" + '"' +  file + '"' + "," + "*this*" + ")";
      }
      return post;
  };
  var code = "#+NAME: " + snippet + "_" + process + "\n";
  code = code + "#+BEGIN_SRC python :session :noweb yes "  + gen_post() + "\n";
  code = code + '"""<<' + snippet + '>>"""' + "\n";
  code = code + "#+END_SRC";
  console.log(code);
  return 0;
#+END_SRC

#+RESULTS: wrap
#+NAME: abc_txt
#+BEGIN_SRC python :session :noweb yes
"""<<abc>>"""
#+END_SRC


#+BEGIN_SRC elisp :var a="add" :var b="aync" :noweb yes
  (with-temp-buffer
    (insert <<post_cmd[0]("A","aync")>>)
    (buffer-string)
    )
    (insert "#+BEGIN_SRC python :session :noweb yes")

#+END_SRC

#+RESULTS:
:
: undefined hello

call_post_cmd("A","aync")



* Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:

This section contains all code implementing the Emacs Starter Kit.  It
is probably safe to stop reading at this point unless you are
interested in the actual code implementing the starter kit.

- Function for loading other parts of the starter kit
  #+name: starter-kit-load
  #+begin_src emacs-lisp
    (defun starter-kit-load (file &optional header-or-tag)
      "Load configuration from other starter-kit-*.org files.
    If the optional argument is the id of a subtree then only
    configuration from within that subtree will be loaded.  If it is
    not an id then it will be interpreted as a tag, and only subtrees
    marked with the given tag will be loaded.

    For example, to load all of starter-kit-lisp.org simply
    add (starter-kit-load \"lisp\") to your configuration.

    To load only the 'window-system' config from
    starter-kit-misc-recommended.org add
     (starter-kit-load \"misc-recommended\" \"window-system\")
    to your configuration."
      (let ((file (expand-file-name (if (string-match "starter-kit-.+\.org" file)
                                        file
                                      (format "starter-kit-%s.org" file))
                                    starter-kit-dir)))
        (org-babel-load-file
         (if header-or-tag
             (let* ((base (file-name-nondirectory file))
                    (dir  (file-name-directory file))
                    (partial-file (expand-file-name
                                   (concat "." (file-name-sans-extension base)
                                           ".part." header-or-tag ".org")
                                   dir)))
               (unless (file-exists-p partial-file)
                 (with-temp-file partial-file
                   (insert
                    (with-temp-buffer
                      (insert-file-contents file)
                      (save-excursion
                        (condition-case nil ;; collect as a header
                            (progn
                              (org-link-search (concat"#"header-or-tag))
                              (org-narrow-to-subtree)
                              (buffer-string))
                          (error ;; collect all entries with as tags
                           (let (body)
                             (org-map-entries
                              (lambda ()
                                (save-restriction
                                  (org-narrow-to-subtree)
                                  (setq body (concat body "\n" (buffer-string)))))
                              header-or-tag)
                             body))))))))
               partial-file)
           file))))
  #+end_src

- Remove Menu bar, tool bar, start up messages
 #+NAME: starter-kit-remove_unnecessary
 #+BEGIN_SRC emacs-lisp
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1))
  (setq inhibit-startup-message t)
#+END_SRC


** Starter kit core
   :PROPERTIES:
   :CUSTOM_ID: starter-kit-core
   :END:
The following files contain the remainder of the core of the Emacs
Starter Kit.  All of the code in this section should be loaded by
everyone using the starter kit.

# - Starter kit function definitions in [[file:starter-kit-defuns.org][starter-kit-defuns]]
#   #+begin_src emacs-lisp
#   (starter-kit-load "starter-kit-defuns.org")
#   #+end_src

# - Key Bindings in [[file:starter-kit-bindings.org][starter-kit-bindings]]
#   #+begin_src emacs-lisp
#   (starter-kit-load "starter-kit-bindings.org")
#   #+end_src

# - Miscellaneous settings in [[file:starter-kit-misc.org][starter-kit-misc]]
#   #+begin_src emacs-lisp
#   (starter-kit-load "starter-kit-misc.org")
#   #+end_src

# - Registers for jumping to commonly used files in [[file:starter-kit-registers.org][starter-kit-registers]]
#   #+begin_src emacs-lisp
#   (starter-kit-load "starter-kit-registers.org")
#   #+end_src

#   #+RESULTS:
#   : Loaded /home/rks/literalemacs/starter-kit-registers.el

*** Truncate Line
   :PROPERTIES:
   :CUSTOM_ID: starter-kit-truncate
   :END:

 #+NAME: starter-kit-truncate
 #+BEGIN_SRC emacs-lisp
 (setq-default truncate-lines nil)
 #+END_SRC
* Curry
** Multiline
#+BEGIN_SRC js :cmd "babel-node"
return ```
HEllo
WOrld
abcdefgh
```
#+END_SRC
** Clujure
#+BEGIN_SRC js :cmd "babel-node"
  var digit_name = (function (n) {
      var names;
      return function (n) {
          if (!names){
              names = ['zero', 'one', 'two', 'three','four', 'five','six' ];
          }
          return names[n];
      };
  }());
  console.log(digit_name(6));
#+END_SRC

#+RESULTS:
: six
: undefined

** split words
#+NAME: splitw
#+BEGIN_SRC js :cmd "babel-node" :var a="Test123***  TEST"
    return a.split(" ").reduce(function (max, val) {
        console.log(max + "  " + val);
        return val.length > max ? val.length : max;
    } , 0);
#+END_SRC

#+RESULTS: splitw
: 0  Test123***
: 10
: 10  TEST
: 10

** substring

#+BEGIN_SRC js :cmd "babel-node" :var str="abcdefgh"  :var target="fgh"
return target === str.substr(str.length - target.length, str.length - 1)
#+END_SRC

#+RESULTS:
: true

** multidimen arrary
#+BEGIN_SRC js :cmd "babel-node" :results output
  function largestOfFour(arr) {
    var p=[];
    arr.reduce(function(arrmax, arr1){
        var maxnumberofthearray = arr1.reduce(function(elmmax, elm) {
            return elm > elmmax ? elm: elmmax;
        },0);
        p.push(maxnumberofthearray);
        return 0;
    } , 0);
    return p;
  }

  console.log(largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]));
#+END_SRC

#+RESULTS:
: [ 5, 27, 39, 1001 ]

** filter
*** MAP
#+BEGIN_SRC js :cmd "babel-node" :results output
  var contacts = [
      {
          "firstName": "Akira",
          "lastName": "Laine",
          "number": "0543236543",
          "likes": ["Pizza", "Coding", "Brownie Points"]
      },
      {
          "firstName": "Harry",
          "lastName": "Potter",
          "number": "0994372684",
          "likes": ["Hogwarts", "Magic", "Hagrid"]
      },
      {
          "firstName": "Sherlock",
          "lastName": "Holmes",
          "number": "0487345643",
          "likes": ["Intriguing Cases", "Violin"]
      },
      {
          "firstName": "Kristian",
          "lastName": "Vos",
          "number": "unknown",
          "likes": ["Javascript", "Gaming", "Foxes"]
      }
  ];


  function lookUp(firstName, prop){
  // Only change code below this line
    var directory = contacts.filter(function(address){
      if ( (prop in  address) && address["firstName"] === firstName ){
        return true;
      }
      return false;
    });
    return !directory.length ? "No such contact" : directory[0][prop];

  // Only change code above this line
  }

  // Change these values to test your function
  console.log(lookUp("Akira", "likes"));

#+END_SRC

#+RESULTS:
: [ 'Pizza', 'Coding', 'Brownie Points' ]

** TODO Prototype
#+BEGIN_SRC js :cmd "node-babel"  :results output
  const food = {
      init: function (type) {
          this.type = type;
      },
      eat: function() {
          console.log('you ate the')
      }


#+END_SRC

#+RESULTS:

** Map Reduce
#+BEGIN_SRC js :cmd "babel-node" :results output replace
  function chunk(arr, size) {
    // Break it up.
    return arr.reduce(function(atom,val,index){
        if (index%size === 0){
            atom.push(arr.slice(index,size+index));
        }
        return atom;
    } , [] );
  }

  console.log(chunk(["a", "b", "c", "d"], 2));
#+END_SRC

#+RESULTS:
** char to string
#+BEGIN_SRC js :cmd "babel-node" :results output
  var a = "URYYB".split("").map(function(p){
      return /\s/.test(p) ? p: String.fromCharCode((p.charCodeAt(0)-65 +13)%26 +65);
  });
  console.log( "" + a);
#+END_SRC

#+RESULTS:
: H,E,L,L,O

** string Matching case
#+BEGIN_SRC js :cmd "babel-node" :results output
  function mutation(arr) {
    return arr[1].toLowerCase().split("").filter(function(m){
      return arr[0].toLowerCase().split("").indexOf(m) >= 0;
    }).length === arr[1].length;
/*
.reduce(function(a,b){
      if (a){
        return b >= 0? true: false;
      }
      return false;
    });
*/
  }
  console.log("|" + mutation(["hello", "Hello"]) + "|");
#+END_SRC

#+RESULTS:
: |true|

** Function Argument convert to array
#+BEGIN_SRC js :cmd "babel-node" :resutls output
  function destroyer(arr) {
    // Remove all the values
      var args = Array.prototype.slice.call(arguments, 1);
    return arr.filter(function(v){
        return !args.reduce(function(isthere,val){
            if (isthere === true) return true;
            return  (val === v) ? true : false;
      },false);
    });
  }

console.log(destroyer([1, 2, 3, 1, 2, 3], 2, 3));
#+END_SRC

#+RESULTS:
| 1 | 1 |

** sort
#+BEGIN_SRC js :cmd "babel-node" :resutls output
  function where(arr, num) {
    // Find my place in this sorted array.
    return arr.sort(function(a,b){
      return a > b;
    }).reduce(function(a,pos,index) {
        if ( pos < num )
            return a+1;
        return a;
    },0);
  }
  console.log(where([40, 60], 50));
#+END_SRC

#+RESULTS:
: 1
: undefined
** Sum min to max

#+BEGIN_SRC js :cmd "babel-node" :resutls output
  function sumAll(arr) {
    return [Math.min(arr[0],arr[1]), Math.max(arr[0],arr[1])].reduce(function(sum,b){
        return (b*(b+1))/2 - sum;
    },Math.min(arr[0],arr[1]));
  }

  console.log(sumAll([1, 4]));
#+END_SRC

#+RESULTS:
: 10
: undefined

** diffs

#+BEGIN_SRC js :cmd "babel-node" :resutls  output
  function diff(arr1, arr2) {
      var arr = arr1;
      // Same, same; but different.

      return arr2.filter( function (val) {
          var flag=true;
          arr = arr.reduce(function(diffs,elm){
              if(elm === val){
                  flag = false;
                  return diffs;
              }
              return diffs.concat(elm);
          },[]);
          return flag;
      }).concat(arr);
  }

return  diff(["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]);

#+END_SRC

#+RESULTS:
| diorite | pink wool |

** Roman Numerial
#+NAME: ruman
#+BEGIN_SRC js :cmd "babel-node" :var num="353"
  var rumannumberrule = function(x,index){
      var rumancombination = [["I","V"],["X","L"],["C","D"]];
      if (x < 4) return rumancombination[index][0].repeat(x);
      if (x === 4) return rumancombination[index].join("");
      if (x < 9 ) return rumancombination[index][1] +  rumancombination[index][0].repeat(x-5);
      return rumancombination[index][0] + rumancombination[index+1][0];
  };

  var numtoarray = function(nm, numarr){
      if (nm === 0) return numarr;
      numarr.unshift(nm%10);
      return numtoarray(Math.floor(nm/10),numarr);
  };

  return numtoarray(num,[]).map(function(val, index,arrl) {
      return rumannumberrule(val,arrl.length - index -1);
  }).join("");
#+END_SRC

#+RESULTS: ruman
: CCCLIII

#+call: ruman(19)

#+RESULTS:
: XIX


#+BEGIN_SRC js :cmd "babel-node" :var r="I"
  var numtoarray = function(nm, numarr){
      if (nm === 0) return numarr;
      numarr.push(nm%10);
      return numtoarray(Math.floor(nm/10),numarr);
  };
  return numtoarray(322, []);
#+END_SRC

#+RESULTS:
| 2 | 2 | 3 |

** Reduce Data to Manipulate
#+BEGIN_SRC sh
npm install -g fs
#+END_SRC

#+RESULTS:
| /usr/local/lib |          |
| └──            | fs@0.0.2 |
|                |          |

#+BEGIN_SRC js :cmd "babel-node"
  let fs = require('fs');
  let output = fs.readFileSync('data.org','utf8')
                 .trim()
                 .split('\n')
                 .map( line => line.split('|').map( word => word.trim() )
                                              .filter(word => word.length))
                 .reduce((customers , line) => {
                     customers[line[0]] = customers[line[0]] || []
                     customers[line[0]].push({
                         name: line[1],
                         price: line[2],
                         quantity: line[3]
                     })
                     return customers
                  }, {})

  console.log('output', JSON.stringify(output, null, 2));
#+END_SRC

#+RESULTS:
#+begin_example
output {
  "mark Johnson": [
    {
      "name": "waffle",
      "price": "iron",
      "quantity": "80"
    },
    {
      "name": "blender",
      "price": "200",
      "quantity": "1"
    },
    {
      "name": "knife",
      "price": "10",
      "quantity": "4"
    }
  ],
  "Nikita Smith": [
    {
      "name": "waffle",
      "price": "iron",
      "quantity": "80"
    },
    {
      "name": "knife",
      "price": "10",
      "quantity": "2"
    },
    {
      "name": "nuts",
      "price": "20",
      "quantity": "3"
    }
  ]
}
undefined
#+end_example
** Curring
#+BEGIN_SRC js :cmd "babel-node"
  let dragons = [
      { name: 'flpikin', element: 'lighting'},
      { name: 'noomi', element: 'lighting'},
      { name: 'kora', element: 'fire'},
      { name: 'doomer', element: 'timewarp'}
  ]

  let hasElement =
      (element, obj) => obj.element === element

  let lightingDragons =
      dragons.filter( x => hasElement('lighting',x))

  console.log(JSON.stringify(lightingDragons,null,2)
#+END_SRC

#+RESULTS:
** Regex
*** reduce to alplanumaric
#+NAME: onlyalphanum
#+BEGIN_SRC js :cmd "babel-node" :var a="Test123***  TEST"
  return a.replace(/[^a-z0-9]/gi,'');
#+END_SRC

#+RESULTS:
: Test123TEST

#+call: onlyalphanum("race car")

#+RESULTS:
: racecar

*** Hello World
#+BEGIN_SRC js :cmd "babel-node"
return "thisIsSpinalTap".replace(/([a-z])([A-Z])/g,"$1-$2")

#+END_SRC

#+RESULTS:
: this-Is-Spinal-Tap

*** Unclassifed
#+BEGIN_SRC js :cmd "babel-node" :resutls output
let re = /\w+\s/g;
let str = "fee fi fo fum";
let myArr = str.match(re);
//console.log( myArr);
console.log(/[a-z]+/.test(str[2]))
#+END_SRC

#+RESULTS:
: true
: undefined

#+BEGIN_SRC js :cmd "babel-node" :resutls output
var myArray = /d(b+)d/g.exec("cdbbbdsbz");
console.log(myArray.index);
#+END_SRC

#+RESULTS:
: 1
: undefined

#+BEGIN_SRC js :cmd "babel-node" :resutls output
  var myRe = new RegExp("\\w+\\s*","g");
  var myArray = "I go    to   school everyday".match(myRe);
  console.log(myArray);
#+END_SRC

#+RESULTS:
| I | go | to | school | everyday |

#+BEGIN_SRC js :cmd "babel-node" :resutls output
let re = /(\w+)\s(\w+)/;
let str = "John Smith";
let newStr = str.replace(re ,"$2, $1");
console.log(newStr);
#+END_SRC

#+RESULTS:
: Smith, John
: undefined

** crypto
#+BEGIN_SRC js :cmd "babel-node" :resutls output
  function translate(str) {
    var suffix="yay";
    var remainder ="";
    var vowelisthere = false;
    return str.split("").map(function(elm,index){
      var vowel={
        "a": true,
        "e": true,
        "i": true,
        "o": true,
        "u": true
      };
      console.log("|" + vowel[elm] + "|" + elm + "|" );
      if (vowel.hasOwnProperty(elm) && vowel[elm] === true){
          vowelisthere = true;
      }
      if (vowelisthere === false){
          remainder = remainder + elm;
          suffix= "ay";
          return "";
      }
      if (index === str.length -1){
        return elm + remainder + suffix;
      }
      return elm;
    }).join("");
  }

  console.log(translate("consonant"));

#+END_SRC

#+RESULTS:
#+begin_example
|undefined|c|
|true|o|
|undefined|n|
|undefined|s|
|true|o|
|undefined|n|
|true|a|
|undefined|n|
|undefined|t|
onsonantcay
undefined
#+end_example

** missing letter
#+BEGIN_SRC js :cmd "babel-node"  :resutls output
  function fearNotLetter(str) {
    var miss = undefined;
    str.split("").reduce(function(missing,b){
        if (b.charCodeAt(0) !== missing && miss === undefined) {
          console.log("|"+b+"|"+missing +"|" + b.charCodeAt(0) + "|");
          miss=String.fromCharCode(missing);
        }
        return missing+1;
    }, str[0].charCodeAt(0));
    return miss;
  }
fearNotLetter("abcdefghjklmno")

#+END_SRC

#+RESULTS:
: |j|105|106|
: undefined

#+BEGIN_SRC js :cmd "babel-node"
return "A".charCodeAt(0)
#+END_SRC

#+RESULTS:
: 65

** Sorted Union
#+BEGIN_SRC js :cmd "babel-node"
      function diff(arr1, arr2) {
          var arr = arr2;
          // Same, same; but different.

          return arr1.filter( function (val) {
              var flag=true;
              arr = arr.reduce(function(diffs,elm){
                  if(elm === val){
                      flag = false;
                      return diffs;
                  }
                  if (typeof elm === "number")
                      return diffs.concat(elm);
                  return diffs.concat([elm])
              },[]);
              return true;
          }).concat(arr);
      }

    function unite(arr1, arr2, arr3) {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function(flat,arr){
            return diff(flat,arr);
        }, []);
    }
  //  return unite([1, 2, 3], [5, 2, 1]);
  return unite([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8])

#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 5 | 4 | 6 | 7 | 8 |
** html sytex change
#+BEGIN_SRC js :cmd "babel-node" :restuls output
    function convert(str) {
      // &colon;&rpar;
        var htmlized = (function() {
            var htmlmap = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                "\"":  "&quot;",
                "'": "&apos;",
            };
            return function(value) {
                return htmlmap[value];
            }
        }());
      var matched = str.match(/([&<>"'])/g);
      return !matched ? str : matched.reduce(function(st,elm){
          return st.replace(elm, htmlized(elm));
      },str);

    }

var r=convert("abc & bcd");
console.log(r);
#+END_SRC

#+RESULTS:
: abc &amp; bcd
: undefined

#+BEGIN_SRC js :cmd "babel-node" :resutls output
function convert(str){
  return str;
}
var r=convert("Dolce Gabbana Hello");
console.log(r);
#+END_SRC

#+RESULTS:
: Dolce Gabbana Hello
: undefined

** Object
#+BEGIN_SRC js :cmd "babel-node" :resutls output
  function hello(){
      var ar=[3,33,[333]];
      var f = function(arrr) {
          return arrr[2];
      }
      return f(ar).concat(3);
  }
  return hello();
#+END_SRC

#+RESULTS:
| 333 | 3 |

** Sum of All prime
#+BEGIN_SRC js :results output
  function sumPrimes(num) {
    var populate = function (x,isprimes){
      isprimes.push(x);
      if (x === num) return isprimes;
      return populate(x+1);
    };

    var limit = Math.sqrt(num);

    var isprimefun = function(primearr,n){
      if ( primearr[n] > limit){
        return primearr;
      }

      var primearr_1 = primearr.filter(function(elm){
         if (elm%primearr[n])
           return true;
         return false;
        });
      return isprimefun(primearr_1,primearr_1[n+1]);
    };

    return isprimefun(populate(2,[]),1);

  }

  return sumPrimes(10);

#+END_SRC

#+RESULTS:
