#+TAGS: GTD(g) TIME(t) CLOCKIN(k) SUDO(s) CLIPBOARD(c)
#+SEQ_TODO: TODO TEST DONE
* Tutorial
** Text manipulation
** Rectangle Mode
*** Delete "C-x r d"
*** rectangle-mark-mode
*** cua-resize-rectangle-right
** Regex
*** Syntax
**** Double Quate
     CLOSED: [2015-11-23 সোম 22:07]
| PatternMatches                                  |
| "\([^"]+\)" capture text between double quotes. |
| "hello world"                                   |

*** Matching Newline ＆ Tab
**** To enter a new line, press 【Ctrl+q Ctrl+j】
**** To enter a Tab character, press 【Ctrl+q Tab ↹】
***  Boundary anchors
| \`…                           |
| Beginning of {string, buffer} |
| …\'                           |
| End of {string, buffer}       |
| \b                            |
| word boundary marker          |

** Clipboard [2/3]                                                :CLIPBOARD:
  - [ ] Meta clipboard-kill-ring-save
  - [X] clipboard-kill-region
  - [X] clipboard-yank
** M-x RET set-variable RET
** Cursor Movement and Location [16/16]
        - [X] arrow keys (if available)N/AMove cursor.
        - [X] C-abeginning-of-lineMove to beginning of line.
        - [X] C-eend-of-lineMove to end of line.
        - [X] C-fforward-charMove forward one character.
        - [X] C-bbackward-charMove backward one character.
        - [X] M-f forward-wordMove󿿿 forward one word.
        - [X] M-bbackward-wordMove backward one word.
        - [X] C-nnext-lineMove down a line (creating the next line, if necessary).
        - [X] C-pprevious-lineMove up a line.
        - [X] M-r move-to-window-lineMove to left margin, vertically centered in window.
        - [X] M-<beginning-of-bufferMove to top of buffer.
        - [X] M->end-of-bufferMove to end of buffer.
        - [X] M-x goto-chargoto-charRead a number and go to that buffer position (start = 1).
        - [X] M-x goto-line goto-line Read a number and go to that line (first line = 1).
        - [X] M-=count-lines-regionPrint number of lines in current region.
        - [X] C-x =what-cursor-postitionPrint character code, character position and column of the cursor location.
        - [ ] Setting Mark C-@ -> (c shfit 1 )
        - [ ] C-w . . Kill region. This deletes and puts the region into the kill ring.
        - [ ] C-y . . Yank. This inserts the last snippet from the kill ring.
        - [ ] M-y . . Cycle kill ring. Immediately after C-y, this replaces the yanked part by the other snippets in the kill ring.
        - [ ] M-w . . Save region into kill ring. Like C-w, but doesn't delete.
        - [ ] In short, you start selection like usual with C-spc, then kill region with C-x r k and paste/yank killed block with C-x r y
        - [ ] C-x b buffer RET
        - [ ] C-x 4 buffer RET - another window ( switch-to-buffer-other-window )
        - [ ] C-x 4 b buffer RET another frame
* Lisp
** find file
#+BEGIN_SRC elisp
(defun gtd ()
  (interactive)
  (find-file "~/org/gtd.org")
  )
#+END_SRC

#+RESULTS:
: gtd

** For troubled network auto save frequently
#+BEGIN_SRC elisp
(setq auto-save-interval 1
          auto-save-timeout 1)
#+END_SRC

#+RESULTS:
: 1

*** Automatically save your changes after an customizable interval
I really like this idea, because it’s dumb to make me hit C-x C-s all the time because of technical details of the computer’s architecture, and almost everything I edit is under version control anyway. I like using auto-save-hook, and that seems to work well, but I want to save all the buffers, because if I switch away from a buffer before it autosaves, I want it to get saved when things next get saved after that. So I combined parts of the two above solutions (this is the first elisp code I’ve written, could have glaring problems)
#+BEGIN_SRC elisp
  (defun full-auto-save ()
    (interactive)
    (save-excursion
    (dolist (buf (buffer-list))
      (set-buffer buf)
      (if (and (buffer-file-name) (buffer-modified-p))
          (basic-save-buffer)))))
(add-hook 'auto-save-hook 'full-auto-save)
#+END_SRC
** Color Theme
- Colur Themes
#+NAME: starter-kit-set-color-theme
#+BEGIN_SRC emacs-lisp
(require 'color-theme)
(setq color-theme-is-global t)
;; (color-theme-initialize)


(load "color-theme-zenburn")
(load "color-theme-tangotango")
;;(load "color-theme-ujelly")


(setq ash-color-themes (list
  'color-theme-tangotango
  'color-theme-zenburn
))

(defun ash-theme-set-default () ; Set the first row
      (interactive)
      (setq theme-current ash-color-themes)
      (funcall (car theme-current)))

(defun ash-describe-theme () ; Show the current theme
  (interactive)
  (message "%s" (car theme-current)))

   ; Set the next theme (fixed by Chris Webber - tanks)
(defun ash-theme-cycle ()
  (interactive)
  (setq theme-current (cdr theme-current))
  (if (null theme-current)
      (setq theme-current ash-color-themes))
  (funcall (car theme-current))
  (message "%S" (car theme-current)))

(setq theme-current ash-color-themes)
(setq color-theme-is-global nil) ; Initialization
(ash-theme-set-default)
(global-set-key [f4] 'ash-theme-cycle)
#+END_SRC

** Keyboard Macro [8/9]
        - [X] f3 start
        - [X] f4 end
        - [X] c-x e - execute
        - [X] c-x c-k SPC - debug
        - [X] c-x c-k n - name exp name: abc_mac
        - [X] in .emacs.d - insert-kbd-macro abc_mac
        - [X] repeat infinate c-u 0 c-x e
        - [X] recent commands c-x c-k l
** Line Truncate
*** Elisp Command
Note: Need to reset Emacs to get truncate effect
or use [[Command]] directly
#+BEGIN_SRC elisp
(setq-default truncate-lines nil)
#+END_SRC
#+RESULTS:
*** Command
****  M-x set-variable truncate-lines nil.
* Find Libarary
M-x find-library RET kmacro
M-x find-library RET edmacro
