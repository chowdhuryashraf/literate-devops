#+SEQ_TODO: TODO OPTIONAL TEST DONE
* Sanity with Arch Linux and xmonad

In a world where most Linux users revolve around Ubuntu and desktop environments choices (Gnome vs KDE vs …), I’m feeling more and more attracted to something simpler
and more lightweight. And even though my installations of KDE and Gnome were done on a very light Debian system, with almost everything stripped off, I noticed that
they could be even more light: they have more widgets than I need, and more applications than I ever used.

Besides that, my attempt at having a rolling distribution of Debian by pointing it to testing, also meant that my system was far more unstable than I wanted. I got a
rolling distribution but I got a broken system every once in a while.

So I rethought all these constraints and how to accomodate them better with a new distribution. Here’s what I want:

- A distribution which is inherently rolling but where that doesn’t mean loosing stability;
- A distribution which gets me just the bare bare minimum, from where I can iteratively build up;
- A window manager (instead of a desktop environment) which keeps out of the way and is super light on resources.

** So after some reading and experimenting, I decided to go with Arch Linux and xmonad.

Many things contributed to this decision but for sure documentation was one of the main ones for Arch. I had bumped into their wiki accidentally many times before
while trying to solve problems on Debian and the quality is quite good.

As for xmonad, the choice was essentially based on the fact that it was implemented in Haskell, which gives me a chance to play with the source code. The fact that it
is super light on resources definitelly helped, but to be honest I did not look into other alternatives.

So here I am, 24 hours later, writing this blog post on Emacs running on Xmonad on a fresh and light Arch Linux installation. The rest of this post explains how to do
it.

What you should be aware of

Depending on your experience, Arch Linux may be a bit too manual for your taste. You should definitelly read the begginer’s guide, the FAQ and the installation guide
beforehand - the documentation is well written and it gives you a general idea of all the steps you’ll have to go through, which are somewhat different from a Debian
instalation for example.

** There are a few things I think you should prepare ahead of time, even before burning the installation CD, and the docs don’t really mention:

- Find out if your BIOS uses UEFI or not as this is very relevant for the bootloader installation. It will depend on things such as whether you have other operating
  systems installed or not or if you plan to do it eventually;
- Find out to what is your BIOS time synchronized to. Is it UTC or local time?
- Partition your hard disk before you even start this whole process. This one I cannot stress enough – get a gparted Live CD (or whatever you prefer), boot into your
  computer and prepartition it. You’ll get the benefit of doing it in a controlled environment, thinking well ahead of time about how you want to have your partitions.
  Oh and do write down what is each partition, i.e., /dev/sda5 is /, /dev/sda6 is /boot, etc.
- Definitelly do this with the instructions printed or opened on another laptop so that you can search for help if you get stuck.

* DONE The base system
  CLOSED: [2016-01-24 Sun 03:13]

The CD can be downloaded from Arch linux downloads page. Partition your disk, burn Arch into a CD and boot into it. You’ll have a menu at boot time and then you’ll be
logged in as root in a prompt.

** OPTIONAL Activate the keymap you want if you don’t want US english. In my case, for Portuguese:
#+BEGIN_SRC sh
 loadkeys /usr/share/kbd/keymaps/i386/qwerty/pt-latin9.map.gz
#+END_SRC

Since we already partitioned the disks, let’s format them. In my case, I had 2 extended partitions (sda5 and sda6) under a logical partition, after the Windows 8
partitions:
#+BEGIN_SRC sh
 mkfs.ext4 /dev/sda5
#+END_SRC
** DONE Swap
   CLOSED: [2016-01-24 Sun 02:44]
#+BEGIN_SRC
 swapon /dev/sda6
#+END_SRC

Now we install the base system onto /mnt. We’ll first vi
/etc/pacman.d/mirrorlist and leave only the best mirrors.
I left all the ones until 1.5 since those included a
lot of germany and european mirrors, and removed all US mirrors.
It’s important to note that, since I was on a wired connection,
the next step works automatically for shme. I haven’t tried this
on a wireless connection but the documentation explains how to do it.

#+BEGIN_SRC sh
 mkswap /dev/sda6
#+END_SRC

** DONE Monut
   CLOSED: [2016-01-24 Sun 02:45]

Let’s mount the partitions. The partition which is going to be / should be mounted on /mnt.

#+BEGIN_SRC sh
mount /dev/sda1 /mnt
#+END_SRC


This part takes a little bit. When that’s done it’s time to switch to the newly installed system and finish setting it up:
** DONE Generate fstab
   CLOSED: [2016-01-24 Sun 03:13]
#+BEGIN_SRC sh
genfstab -p -L /mnt >> /mnt/etc/fstab
#+END_SRC

** DONE chrook
   CLOSED: [2016-01-24 Sun 02:45]
#+BEGIN_SRC sh
arch-chroot /mnt
#+END_SRC

* DONE Configaring things
  CLOSED: [2016-01-24 Sun 04:18]
This part of the configuration will surely be different for you but my examples will indicate what you should be doing on your computer:
** DONE Host
   CLOSED: [2016-01-24 Sun 02:45]
#+BEGIN_SRC sh
echo archnua > /etc/hostname
#+END_SRC

#+RESULTS:
#+call: fread("/etc/hostname")

#+RESULTS:
: archnua

** DONE Timezone
   CLOSED: [2016-01-24 Sun 02:45]
#+BEGIN_SRC sh
ln -sf /usr/share/zoneinfo/Asia/Dhaka  /etc/localtime
#+END_SRC

#+RESULTS:

** DONE Keyboard (US)
   CLOSED: [2016-01-24 Sun 02:46]
- /etc/locale.gen and uncommented en_GB entries and then run locale-gen
#+BEGIN_SRC elisp :var filename="/etc/locale.gen")
  (with-temp-buffer
    (insert-file-contents filename)
    (goto-char (point-min))
    (while (search-forward "#en_US" nil t)
      (replace-match "en_US"))
    (when (file-writable-p filename)
      (write-region (point-min) (point-max) filename nil))
      (buffer-string))
#+END_SRC

#+RESULTS:
#+begin_example
# Configuration file for locale-gen
#
# lists of locales that are to be generated by the locale-gen command.
#
# Each line is of the form:
#
#     <locale> <charset>
#
#  where <locale> is one of the locales given in /usr/share/i18n/locales
#  and <charset> is one of the character sets listed in /usr/share/i18n/charmaps
#
#  Examples:
#  en_US ISO-8859-1
#  en_US.UTF-8 UTF-8
#  de_DE ISO-8859-1
#  de_DE@euro ISO-8859-15
#
#  The locale-gen command will generate all the locales,
#  placing them in /usr/lib/locale.
#
#  A list of supported locales is included in this file.
#  Uncomment the ones you need.
#
#aa_DJ.UTF-8 UTF-8
#aa_DJ ISO-8859-1
#aa_ER UTF-8
#aa_ER@saaho UTF-8
#aa_ET UTF-8
#af_ZA.UTF-8 UTF-8
#af_ZA ISO-8859-1
#ak_GH UTF-8
#am_ET UTF-8
#an_ES.UTF-8 UTF-8
#an_ES ISO-8859-15
#anp_IN UTF-8
#ar_AE.UTF-8 UTF-8
#ar_AE ISO-8859-6
#ar_BH.UTF-8 UTF-8
#ar_BH ISO-8859-6
#ar_DZ.UTF-8 UTF-8
#ar_DZ ISO-8859-6
#ar_EG.UTF-8 UTF-8
#ar_EG ISO-8859-6
#ar_IN UTF-8
#ar_IQ.UTF-8 UTF-8
#ar_IQ ISO-8859-6
#ar_JO.UTF-8 UTF-8
#ar_JO ISO-8859-6
#ar_KW.UTF-8 UTF-8
#ar_KW ISO-8859-6
#ar_LB.UTF-8 UTF-8
#ar_LB ISO-8859-6
#ar_LY.UTF-8 UTF-8
#ar_LY ISO-8859-6
#ar_MA.UTF-8 UTF-8
#ar_MA ISO-8859-6
#ar_OM.UTF-8 UTF-8
#ar_OM ISO-8859-6
#ar_QA.UTF-8 UTF-8
#ar_QA ISO-8859-6
#ar_SA.UTF-8 UTF-8
#ar_SA ISO-8859-6
#ar_SD.UTF-8 UTF-8
#ar_SD ISO-8859-6
#ar_SS UTF-8
#ar_SY.UTF-8 UTF-8
#ar_SY ISO-8859-6
#ar_TN.UTF-8 UTF-8
#ar_TN ISO-8859-6
#ar_YE.UTF-8 UTF-8
#ar_YE ISO-8859-6
#ayc_PE UTF-8
#az_AZ UTF-8
#as_IN UTF-8
#ast_ES.UTF-8 UTF-8
#ast_ES ISO-8859-15
#be_BY.UTF-8 UTF-8
#be_BY CP1251
#be_BY@latin UTF-8
#bem_ZM UTF-8
#ber_DZ UTF-8
#ber_MA UTF-8
#bg_BG.UTF-8 UTF-8
#bg_BG CP1251
#bhb_IN.UTF-8 UTF-8
#bho_IN UTF-8
#bn_BD UTF-8
#bn_IN UTF-8
#bo_CN UTF-8
#bo_IN UTF-8
#br_FR.UTF-8 UTF-8
#br_FR ISO-8859-1
#br_FR@euro ISO-8859-15
#brx_IN UTF-8
#bs_BA.UTF-8 UTF-8
#bs_BA ISO-8859-2
#byn_ER UTF-8
#ca_AD.UTF-8 UTF-8
#ca_AD ISO-8859-15
#ca_ES.UTF-8 UTF-8
#ca_ES ISO-8859-1
#ca_ES@euro ISO-8859-15
#ca_FR.UTF-8 UTF-8
#ca_FR ISO-8859-15
#ca_IT.UTF-8 UTF-8
#ca_IT ISO-8859-15
#ce_RU UTF-8
#cmn_TW UTF-8
#crh_UA UTF-8
#cs_CZ.UTF-8 UTF-8
#cs_CZ ISO-8859-2
#csb_PL UTF-8
#cv_RU UTF-8
#cy_GB.UTF-8 UTF-8
#cy_GB ISO-8859-14
#da_DK.UTF-8 UTF-8
#da_DK ISO-8859-1
#de_AT.UTF-8 UTF-8
#de_AT ISO-8859-1
#de_AT@euro ISO-8859-15
#de_BE.UTF-8 UTF-8
#de_BE ISO-8859-1
#de_BE@euro ISO-8859-15
#de_CH.UTF-8 UTF-8
#de_CH ISO-8859-1
#de_DE.UTF-8 UTF-8
#de_DE ISO-8859-1
#de_DE@euro ISO-8859-15
#de_LU.UTF-8 UTF-8
#de_LU ISO-8859-1
#de_LU@euro ISO-8859-15
#doi_IN UTF-8
#dv_MV UTF-8
#dz_BT UTF-8
#el_GR.UTF-8 UTF-8
#el_GR ISO-8859-7
#el_CY.UTF-8 UTF-8
#el_CY ISO-8859-7
#en_AG UTF-8
#en_AU.UTF-8 UTF-8
#en_AU ISO-8859-1
#en_BW.UTF-8 UTF-8
#en_BW ISO-8859-1
#en_CA.UTF-8 UTF-8
#en_CA ISO-8859-1
#en_DK.UTF-8 UTF-8
#en_DK ISO-8859-1
#en_GB.UTF-8 UTF-8
#en_GB ISO-8859-1
#en_HK.UTF-8 UTF-8
#en_HK ISO-8859-1
#en_IE.UTF-8 UTF-8
#en_IE ISO-8859-1
#en_IE@euro ISO-8859-15
#en_IN UTF-8
#en_NG UTF-8
#en_NZ.UTF-8 UTF-8
#en_NZ ISO-8859-1
#en_PH.UTF-8 UTF-8
#en_PH ISO-8859-1
#en_SG.UTF-8 UTF-8
#en_SG ISO-8859-1
en_US.UTF-8 UTF-8
en_US ISO-8859-1
#en_ZA.UTF-8 UTF-8
#en_ZA ISO-8859-1
#en_ZM UTF-8
#en_ZW.UTF-8 UTF-8
#en_ZW ISO-8859-1
#es_AR.UTF-8 UTF-8
#es_AR ISO-8859-1
#es_BO.UTF-8 UTF-8
#es_BO ISO-8859-1
#es_CL.UTF-8 UTF-8
#es_CL ISO-8859-1
#es_CO.UTF-8 UTF-8
#es_CO ISO-8859-1
#es_CR.UTF-8 UTF-8
#es_CR ISO-8859-1
#es_CU UTF-8
#es_DO.UTF-8 UTF-8
#es_DO ISO-8859-1
#es_EC.UTF-8 UTF-8
#es_EC ISO-8859-1
#es_ES.UTF-8 UTF-8
#es_ES ISO-8859-1
#es_ES@euro ISO-8859-15
#es_GT.UTF-8 UTF-8
#es_GT ISO-8859-1
#es_HN.UTF-8 UTF-8
#es_HN ISO-8859-1
#es_MX.UTF-8 UTF-8
#es_MX ISO-8859-1
#es_NI.UTF-8 UTF-8
#es_NI ISO-8859-1
#es_PA.UTF-8 UTF-8
#es_PA ISO-8859-1
#es_PE.UTF-8 UTF-8
#es_PE ISO-8859-1
#es_PR.UTF-8 UTF-8
#es_PR ISO-8859-1
#es_PY.UTF-8 UTF-8
#es_PY ISO-8859-1
#es_SV.UTF-8 UTF-8
#es_SV ISO-8859-1
#es_US.UTF-8 UTF-8
#es_US ISO-8859-1
#es_UY.UTF-8 UTF-8
#es_UY ISO-8859-1
#es_VE.UTF-8 UTF-8
#es_VE ISO-8859-1
#et_EE.UTF-8 UTF-8
#et_EE ISO-8859-1
#et_EE.ISO-8859-15 ISO-8859-15
#eu_ES.UTF-8 UTF-8
#eu_ES ISO-8859-1
#eu_ES@euro ISO-8859-15
#fa_IR UTF-8
#ff_SN UTF-8
#fi_FI.UTF-8 UTF-8
#fi_FI ISO-8859-1
#fi_FI@euro ISO-8859-15
#fil_PH UTF-8
#fo_FO.UTF-8 UTF-8
#fo_FO ISO-8859-1
#fr_BE.UTF-8 UTF-8
#fr_BE ISO-8859-1
#fr_BE@euro ISO-8859-15
#fr_CA.UTF-8 UTF-8
#fr_CA ISO-8859-1
#fr_CH.UTF-8 UTF-8
#fr_CH ISO-8859-1
#fr_FR.UTF-8 UTF-8
#fr_FR ISO-8859-1
#fr_FR@euro ISO-8859-15
#fr_LU.UTF-8 UTF-8
#fr_LU ISO-8859-1
#fr_LU@euro ISO-8859-15
#fur_IT UTF-8
#fy_NL UTF-8
#fy_DE UTF-8
#ga_IE.UTF-8 UTF-8
#ga_IE ISO-8859-1
#ga_IE@euro ISO-8859-15
#gd_GB.UTF-8 UTF-8
#gd_GB ISO-8859-15
#gez_ER UTF-8
#gez_ER@abegede UTF-8
#gez_ET UTF-8
#gez_ET@abegede UTF-8
#gl_ES.UTF-8 UTF-8
#gl_ES ISO-8859-1
#gl_ES@euro ISO-8859-15
#gu_IN UTF-8
#gv_GB.UTF-8 UTF-8
#gv_GB ISO-8859-1
#ha_NG UTF-8
#hak_TW UTF-8
#he_IL.UTF-8 UTF-8
#he_IL ISO-8859-8
#hi_IN UTF-8
#hne_IN UTF-8
#hr_HR.UTF-8 UTF-8
#hr_HR ISO-8859-2
#hsb_DE ISO-8859-2
#hsb_DE.UTF-8 UTF-8
#ht_HT UTF-8
#hu_HU.UTF-8 UTF-8
#hu_HU ISO-8859-2
#hy_AM UTF-8
#hy_AM.ARMSCII-8 ARMSCII-8
#ia_FR UTF-8
#id_ID.UTF-8 UTF-8
#id_ID ISO-8859-1
#ig_NG UTF-8
#ik_CA UTF-8
#is_IS.UTF-8 UTF-8
#is_IS ISO-8859-1
#it_CH.UTF-8 UTF-8
#it_CH ISO-8859-1
#it_IT.UTF-8 UTF-8
#it_IT ISO-8859-1
#it_IT@euro ISO-8859-15
#iu_CA UTF-8
#iw_IL.UTF-8 UTF-8
#iw_IL ISO-8859-8
#ja_JP.EUC-JP EUC-JP
#ja_JP.UTF-8 UTF-8
#ka_GE.UTF-8 UTF-8
#ka_GE GEORGIAN-PS
#kk_KZ.UTF-8 UTF-8
#kk_KZ PT154
#kl_GL.UTF-8 UTF-8
#kl_GL ISO-8859-1
#km_KH UTF-8
#kn_IN UTF-8
#ko_KR.EUC-KR EUC-KR
#ko_KR.UTF-8 UTF-8
#kok_IN UTF-8
#ks_IN UTF-8
#ks_IN@devanagari UTF-8
#ku_TR.UTF-8 UTF-8
#ku_TR ISO-8859-9
#kw_GB.UTF-8 UTF-8
#kw_GB ISO-8859-1
#ky_KG UTF-8
#lb_LU UTF-8
#lg_UG.UTF-8 UTF-8
#lg_UG ISO-8859-10
#li_BE UTF-8
#li_NL UTF-8
#lij_IT UTF-8
#lo_LA UTF-8
#lt_LT.UTF-8 UTF-8
#lt_LT ISO-8859-13
#lv_LV.UTF-8 UTF-8
#lv_LV ISO-8859-13
#lzh_TW UTF-8
#mag_IN UTF-8
#mai_IN UTF-8
#mg_MG.UTF-8 UTF-8
#mg_MG ISO-8859-15
#mhr_RU UTF-8
#mi_NZ.UTF-8 UTF-8
#mi_NZ ISO-8859-13
#mk_MK.UTF-8 UTF-8
#mk_MK ISO-8859-5
#ml_IN UTF-8
#mn_MN UTF-8
#mni_IN UTF-8
#mr_IN UTF-8
#ms_MY.UTF-8 UTF-8
#ms_MY ISO-8859-1
#mt_MT.UTF-8 UTF-8
#mt_MT ISO-8859-3
#my_MM UTF-8
#nan_TW UTF-8
#nan_TW@latin UTF-8
#nb_NO.UTF-8 UTF-8
#nb_NO ISO-8859-1
#nds_DE UTF-8
#nds_NL UTF-8
#ne_NP UTF-8
#nhn_MX UTF-8
#niu_NU UTF-8
#niu_NZ UTF-8
#nl_AW UTF-8
#nl_BE.UTF-8 UTF-8
#nl_BE ISO-8859-1
#nl_BE@euro ISO-8859-15
#nl_NL.UTF-8 UTF-8
#nl_NL ISO-8859-1
#nl_NL@euro ISO-8859-15
#nn_NO.UTF-8 UTF-8
#nn_NO ISO-8859-1
#nr_ZA UTF-8
#nso_ZA UTF-8
#oc_FR.UTF-8 UTF-8
#oc_FR ISO-8859-1
#om_ET UTF-8
#om_KE.UTF-8 UTF-8
#om_KE ISO-8859-1
#or_IN UTF-8
#os_RU UTF-8
#pa_IN UTF-8
#pa_PK UTF-8
#pap_AN UTF-8
#pap_AW UTF-8
#pap_CW UTF-8
#pl_PL.UTF-8 UTF-8
#pl_PL ISO-8859-2
#ps_AF UTF-8
#pt_BR.UTF-8 UTF-8
#pt_BR ISO-8859-1
#pt_PT.UTF-8 UTF-8
#pt_PT ISO-8859-1
#pt_PT@euro ISO-8859-15
#quz_PE UTF-8
#raj_IN UTF-8
#ro_RO.UTF-8 UTF-8
#ro_RO ISO-8859-2
#ru_RU.KOI8-R KOI8-R
#ru_RU.UTF-8 UTF-8
#ru_RU ISO-8859-5
#ru_UA.UTF-8 UTF-8
#ru_UA KOI8-U
#rw_RW UTF-8
#sa_IN UTF-8
#sat_IN UTF-8
#sc_IT UTF-8
#sd_IN UTF-8
#sd_IN@devanagari UTF-8
#se_NO UTF-8
#shs_CA UTF-8
#si_LK UTF-8
#sid_ET UTF-8
#sk_SK.UTF-8 UTF-8
#sk_SK ISO-8859-2
#sl_SI.UTF-8 UTF-8
#sl_SI ISO-8859-2
#so_DJ.UTF-8 UTF-8
#so_DJ ISO-8859-1
#so_ET UTF-8
#so_KE.UTF-8 UTF-8
#so_KE ISO-8859-1
#so_SO.UTF-8 UTF-8
#so_SO ISO-8859-1
#sq_AL.UTF-8 UTF-8
#sq_AL ISO-8859-1
#sq_MK UTF-8
#sr_ME UTF-8
#sr_RS UTF-8
#sr_RS@latin UTF-8
#ss_ZA UTF-8
#st_ZA.UTF-8 UTF-8
#st_ZA ISO-8859-1
#sv_FI.UTF-8 UTF-8
#sv_FI ISO-8859-1
#sv_FI@euro ISO-8859-15
#sv_SE.UTF-8 UTF-8
#sv_SE ISO-8859-1
#sw_KE UTF-8
#sw_TZ UTF-8
#szl_PL UTF-8
#ta_IN UTF-8
#ta_LK UTF-8
#tcy_IN.UTF-8 UTF-8
#te_IN UTF-8
#tg_TJ.UTF-8 UTF-8
#tg_TJ KOI8-T
#th_TH.UTF-8 UTF-8
#th_TH TIS-620
#the_NP UTF-8
#ti_ER UTF-8
#ti_ET UTF-8
#tig_ER UTF-8
#tk_TM UTF-8
#tl_PH.UTF-8 UTF-8
#tl_PH ISO-8859-1
#tn_ZA UTF-8
#tr_CY.UTF-8 UTF-8
#tr_CY ISO-8859-9
#tr_TR.UTF-8 UTF-8
#tr_TR ISO-8859-9
#ts_ZA UTF-8
#tt_RU UTF-8
#tt_RU@iqtelif UTF-8
#ug_CN UTF-8
#uk_UA.UTF-8 UTF-8
#uk_UA KOI8-U
#unm_US UTF-8
#ur_IN UTF-8
#ur_PK UTF-8
#uz_UZ.UTF-8 UTF-8
#uz_UZ ISO-8859-1
#uz_UZ@cyrillic UTF-8
#ve_ZA UTF-8
#vi_VN UTF-8
#wa_BE ISO-8859-1
#wa_BE@euro ISO-8859-15
#wa_BE.UTF-8 UTF-8
#wae_CH UTF-8
#wal_ET UTF-8
#wo_SN UTF-8
#xh_ZA.UTF-8 UTF-8
#xh_ZA ISO-8859-1
#yi_US.UTF-8 UTF-8
#yi_US CP1255
#yo_NG UTF-8
#yue_HK UTF-8
#zh_CN.GB18030 GB18030
#zh_CN.GBK GBK
#zh_CN.UTF-8 UTF-8
#zh_CN GB2312
#zh_HK.UTF-8 UTF-8
#zh_HK BIG5-HKSCS
#zh_SG.UTF-8 UTF-8
#zh_SG.GBK GBK
#zh_SG GB2312
#zh_TW.EUC-TW EUC-TW
#zh_TW.UTF-8 UTF-8
#zh_TW BIG5
#zu_ZA.UTF-8 UTF-8
#zu_ZA ISO-8859-1
#+end_example

- locale-gen

#+BEGIN_SRC sh
locale-gen
#+END_SRC


#+RESULTS:
| Generating          | locales... |
| en_US.UTF-8...      | done       |
| en_US.ISO-8859-1... | done       |
| Generation          | complete.  |

- locale.conf

#+BEGIN_SRC sh
 locale > /etc/locale.conf
#+END_SRC

#+RESULTS:

#+call: fread("/etc/locale.conf")

#+RESULTS:

#+begin_example
LANG=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=
#+end_example

** OPTIONAL  KEYMAP
 vi /etc/vconsole.conf and add KEYMAP=pt-latin9 and FONT=Lat2-Terminus16
** DONE HW Clock
   CLOSED: [2016-01-24 Sun 02:48]
#+BEGIN_SRC sh
hwclock --systohc --localtime
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh
date
#+END_SRC

#+RESULTS:
: Sat Jan 23 17:21:05 BDT 2016

** DONE DHCP
   CLOSED: [2016-01-24 Sun 04:18]
#+BEGIN_SRC sh
systemctl enable dhcpcd.service
#+END_SRC

#+RESULTS:

** DONE Image Creation and activation
   CLOSED: [2016-01-24 Sun 02:49]
#+BEGIN_SRC sh
mkinitcpio -p linux
#+END_SRC

#+RESULTS:
| ==> | Building   | image               | from         | preset:              | /etc/mkinitcpio.d/linux.preset:    | 'default'                          |    |            |
| ->  | -k         | /boot/vmlinuz-linux | -c           | /etc/mkinitcpio.conf | -g                                 | /boot/initramfs-linux.img          |    |            |
| ==> | Starting   | build:              | 4.3.3-3-ARCH |                      |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [base]               |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [udev]               |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [autodetect]         |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [modconf]            |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [block]              |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [filesystems]        |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [keyboard]           |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [fsck]               |                                    |                                    |    |            |
| ==> | Generating | module              | dependencies |                      |                                    |                                    |    |            |
| ==> | Creating   | gzip-compressed     | initcpio     | image:               | /boot/initramfs-linux.img          |                                    |    |            |
| ==> | Image      | generation          | successful   |                      |                                    |                                    |    |            |
| ==> | Building   | image               | from         | preset:              | /etc/mkinitcpio.d/linux.preset:    | 'fallback'                         |    |            |
| ->  | -k         | /boot/vmlinuz-linux | -c           | /etc/mkinitcpio.conf | -g                                 | /boot/initramfs-linux-fallback.img | -S | autodetect |
| ==> | Starting   | build:              | 4.3.3-3-ARCH |                      |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [base]               |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [udev]               |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [modconf]            |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [block]              |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [filesystems]        |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [keyboard]           |                                    |                                    |    |            |
| ->  | Running    | build               | hook:        | [fsck]               |                                    |                                    |    |            |
| ==> | Generating | module              | dependencies |                      |                                    |                                    |    |            |
| ==> | Creating   | gzip-compressed     | initcpio     | image:               | /boot/initramfs-linux-fallback.img |                                    |    |            |
| ==> | Image      | generation          | successful   |                      |                                    |                                    |    |            |

* DONE Grub Loading
  CLOSED: [2016-01-24 Sun 02:56]
 Now it’s time to install the boot loader. This will definitelly be different for you if you decide to put GRUB on the beggining of your disk. In my case, it’s in the
beggining of sda5 since Windows won’t cope well with it and for that I had to do some more magic:
** DONE Install Grub
   CLOSED: [2016-01-24 Sun 02:49]
*** OPTIONAL chattr remove img
#+BEGIN_SRC sh
chattr -i /boot/grub/i386-pc/core.img
#+END_SRC

#+RESULTS:
*** DONE Install
    CLOSED: [2016-01-24 Sun 02:51]
#+call: cmdaync("pacman -S grub")

#+RESULTS:
| grub.cfg         |
| grub.cfg.example |
*** DONE grub install
    CLOSED: [2016-01-24 Sun 02:52]
#+BEGIN_SRC sh
 grub-install --target=i386-pc --recheck --force /dev/sda
#+END_SRC

#+RESULTS:
*** DONE chattr add img
    CLOSED: [2016-01-24 Sun 02:52]
#+BEGIN_SRC sh
chattr +i /boot/grub/i386-pc/core.img
#+END_SRC

#+RESULTS:

*** DONE grub mkconfig
    CLOSED: [2016-01-24 Sun 02:52]
#+BEGIN_SRC sh
 grub-mkconfig -o /boot/grub/grub.cfg
#+END_SRC

#+RESULTS:

Finally we give a password to root, exit bash and the chroot shell, unmount the system and reboot:

* DONE Fish and adding a user
  CLOSED: [2016-01-24 Sun 04:42]
Let’s start with a few basics, like not using root for everything:
** DONE Install sudo
   CLOSED: [2016-01-24 Sun 02:54]
#+BEGIN_SRC sh
 pacman -S sudo
#+END_SRC

#+BEGIN_SRC sh
which sudo
#+END_SRC

#+RESULTS:
: /usr/bin/sudo

** DONE sudo user persmission
   CLOSED: [2016-01-24 Sun 04:42]
 and uncomment the wheel group line :(
#+BEGIN_SRC elisp :var filename="/etc/sudoers"
  (with-temp-buffer
  (insert-file-contents filename )
  (goto-char (point-min))
  (while (search-forward "# %wheel ALL=(ALL) ALL" nil t)
    (replace-match "%wheel ALL=(ALL) ALL"))
  (when (file-writable-p filename)
    (write-region (point-min) (point-max) filename nil))
  (buffer-string))
#+END_SRC

#+RESULTS:
#+begin_example
## sudoers file.
##
## This file MUST be edited with the 'visudo' command as root.
## Failure to use 'visudo' may result in syntax or file permission errors
## that prevent sudo from running.
##
## See the sudoers man page for the details on how to write a sudoers file.
##

##
## Host alias specification
##
## Groups of machines. These may include host names (optionally with wildcards),
## IP addresses, network numbers or netgroups.
# Host_Alias	WEBSERVERS = www1, www2, www3

##
## User alias specification
##
## Groups of users.  These may consist of user names, uids, Unix groups,
## or netgroups.
# User_Alias	ADMINS = millert, dowdy, mikef

##
## Cmnd alias specification
##
## Groups of commands.  Often used to group related commands together.
# Cmnd_Alias	PROCESSES = /usr/bin/nice, /bin/kill, /usr/bin/renice, \
#                           /usr/bin/pkill, /usr/bin/top
# Cmnd_Alias	REBOOT = /sbin/halt, /sbin/reboot, /sbin/poweroff

##
## Defaults specification
##
## You may wish to keep some of the following environment variables
## when running commands via sudo.
##
## Locale settings
# Defaults env_keep += "LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET"
##
## Run X applications through sudo; HOME is used to find the
## .Xauthority file.  Note that other programs use HOME to find
## configuration files and this may lead to privilege escalation!
# Defaults env_keep += "HOME"
##
## X11 resource path settings
# Defaults env_keep += "XAPPLRESDIR XFILESEARCHPATH XUSERFILESEARCHPATH"
##
## Desktop path settings
# Defaults env_keep += "QTDIR KDEDIR"
##
## Allow sudo-run commands to inherit the callers' ConsoleKit session
# Defaults env_keep += "XDG_SESSION_COOKIE"
##
## Uncomment to enable special input methods.  Care should be taken as
## this may allow users to subvert the command being run via sudo.
# Defaults env_keep += "XMODIFIERS GTK_IM_MODULE QT_IM_MODULE QT_IM_SWITCHER"
##
## Uncomment to use a hard-coded PATH instead of the user's to find commands
# Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
##
## Uncomment to send mail if the user does not enter the correct password.
# Defaults mail_badpass
##
## Uncomment to enable logging of a command's output, except for
## sudoreplay and reboot.  Use sudoreplay to play back logged sessions.
# Defaults log_output
# Defaults!/usr/bin/sudoreplay !log_output
# Defaults!/usr/local/bin/sudoreplay !log_output
# Defaults!REBOOT !log_output

##
## Runas alias specification
##

##
## User privilege specification
##
root ALL=(ALL) ALL

## Uncomment to allow members of group wheel to execute any command
%wheel ALL=(ALL) ALL

## Same thing without a password
# %wheel ALL=(ALL) NOPASSWD: ALL

## Uncomment to allow members of group sudo to execute any command
# %sudo	ALL=(ALL) ALL

## Uncomment to allow any user to run sudo if they know the password
## of the user they are running the command as (root by default).
# Defaults targetpw  # Ask for the password of the target user
# ALL ALL=(ALL) ALL  # WARNING: only use this together with 'Defaults targetpw'

## Read drop-in files from /etc/sudoers.d
## (the '#' here does not indicate a comment)
#includedir /etc/sudoers.d
#+end_example

#+call: fread("/etc/sudoers")

#+RESULTS:
#+begin_example
## sudoers file.
##
## This file MUST be edited with the 'visudo' command as root.
## Failure to use 'visudo' may result in syntax or file permission errors
## that prevent sudo from running.
##
## See the sudoers man page for the details on how to write a sudoers file.
##

##
## Host alias specification
##
## Groups of machines. These may include host names (optionally with wildcards),
## IP addresses, network numbers or netgroups.
# Host_Alias	WEBSERVERS = www1, www2, www3

##
## User alias specification
##
## Groups of users.  These may consist of user names, uids, Unix groups,
## or netgroups.
# User_Alias	ADMINS = millert, dowdy, mikef

##
## Cmnd alias specification
##
## Groups of commands.  Often used to group related commands together.
# Cmnd_Alias	PROCESSES = /usr/bin/nice, /bin/kill, /usr/bin/renice, \
#                           /usr/bin/pkill, /usr/bin/top
# Cmnd_Alias	REBOOT = /sbin/halt, /sbin/reboot, /sbin/poweroff

##
## Defaults specification
##
## You may wish to keep some of the following environment variables
## when running commands via sudo.
##
## Locale settings
# Defaults env_keep += "LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET"
##
## Run X applications through sudo; HOME is used to find the
## .Xauthority file.  Note that other programs use HOME to find
## configuration files and this may lead to privilege escalation!
# Defaults env_keep += "HOME"
##
## X11 resource path settings
# Defaults env_keep += "XAPPLRESDIR XFILESEARCHPATH XUSERFILESEARCHPATH"
##
## Desktop path settings
# Defaults env_keep += "QTDIR KDEDIR"
##
## Allow sudo-run commands to inherit the callers' ConsoleKit session
# Defaults env_keep += "XDG_SESSION_COOKIE"
##
## Uncomment to enable special input methods.  Care should be taken as
## this may allow users to subvert the command being run via sudo.
# Defaults env_keep += "XMODIFIERS GTK_IM_MODULE QT_IM_MODULE QT_IM_SWITCHER"
##
## Uncomment to use a hard-coded PATH instead of the user's to find commands
# Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
##
## Uncomment to send mail if the user does not enter the correct password.
# Defaults mail_badpass
##
## Uncomment to enable logging of a command's output, except for
## sudoreplay and reboot.  Use sudoreplay to play back logged sessions.
# Defaults log_output
# Defaults!/usr/bin/sudoreplay !log_output
# Defaults!/usr/local/bin/sudoreplay !log_output
# Defaults!REBOOT !log_output

##
## Runas alias specification
##

##
## User privilege specification
##
root ALL=(ALL) ALL

## Uncomment to allow members of group wheel to execute any command
%wheel ALL=(ALL) ALL

## Same thing without a password
# %wheel ALL=(ALL) NOPASSWD: ALL

## Uncomment to allow members of group sudo to execute any command
# %sudo	ALL=(ALL) ALL

## Uncomment to allow any user to run sudo if they know the password
## of the user they are running the command as (root by default).
# Defaults targetpw  # Ask for the password of the target user
# ALL ALL=(ALL) ALL  # WARNING: only use this together with 'Defaults targetpw'

## Read drop-in files from /etc/sudoers.d
## (the '#' here does not indicate a comment)
#includedir /etc/sudoers.d
#+end_example

** DONE install fish
   CLOSED: [2016-01-24 Sun 02:55]
#+BEGIN_SRC sh
pacman -S fish python
#+END_SRC
*** Configure fish
Let’s get Fish as well, so that we can define it as the shell for our new user:
#+BEGIN_SRC sh
 chsh -s /usr/bin/fish
#+END_SRC

#+RESULTS:
| Changing | shell    | for | root. |
| Shell    | changed. |     |       |
** DONE Add User
   CLOSED: [2016-01-24 Sun 04:18]
#+NAME: useradd
#+BEGIN_SRC sh :var username=""
 useradd --shell /usr/bin/fish -g users --create-home -m -G wheel $username
#+END_SRC

#+call: useradd("ashik")

#+RESULTS:
: nil

#+call: fread("/etc/passwd")

#+RESULTS:
#+begin_example
root:x:0:0:root:/root:/usr/bin/fish
bin:x:1:1:bin:/bin:/usr/bin/nologin
daemon:x:2:2:daemon:/:/usr/bin/nologin
mail:x:8:12:mail:/var/spool/mail:/usr/bin/nologin
ftp:x:14:11:ftp:/srv/ftp:/usr/bin/nologin
http:x:33:33:http:/srv/http:/usr/bin/nologin
uuidd:x:68:68:uuidd:/:/usr/bin/nologin
dbus:x:81:81:dbus:/:/usr/bin/nologin
nobody:x:99:99:nobody:/:/usr/bin/nologin
systemd-journal-gateway:x:191:191:systemd-journal-gateway:/:/usr/bin/nologin
systemd-timesync:x:192:192:systemd-timesync:/:/usr/bin/nologin
systemd-network:x:193:193:systemd-network:/:/usr/bin/nologin
systemd-bus-proxy:x:194:194:systemd-bus-proxy:/:/usr/bin/nologin
systemd-resolve:x:195:195:systemd-resolve:/:/usr/bin/nologin
systemd-journal-upload:x:999:999:systemd Journal Upload:/:/sbin/nologin
systemd-journal-remote:x:998:998:systemd Journal Remote:/:/sbin/nologin
avahi:x:84:84:avahi:/:/bin/nologin
polkitd:x:102:102:Policy Kit Daemon:/:/usr/bin/nologin
colord:x:124:124::/var/lib/colord:/bin/false
git:x:997:997:git daemon user:/:/bin/bash
luis:x:1000:1000::/home/luis:/usr/bin/fish
ashik:x:1001:100::/home/ashik:/usr/bin/fish
#+end_example

#+call: add
** DONE set passwd
   CLOSED: [2016-01-24 Sun 04:18]
#+BEGIN_SRC sh
passwd luis
#+END_SRC
* OPTIONAL nVIDIA
We can check that the nVIDIA driver works ok even without having X Windows, so let’s do that:
** install
#+BEGIN_SRC sh
pacman -S nvidia
#+END_SRC

* DONE Reset
  CLOSED: [2016-01-23 Sat 22:59]
** DONE passwd
   CLOSED: [2016-01-24 Sun 03:54]
** DONE exit
   CLOSED: [2016-01-24 Sun 03:54]
- exit
- exit
** DONE Unmount
   CLOSED: [2016-01-23 Sat 23:02]
- umount /mnt
** DONE Reboot
   CLOSED: [2016-01-23 Sat 23:02]
- systemctl reboot

* OPTIONAL Fix Resulation
The console will now show up in 640x480 resolution so let’s change that to something nicer. For that we need to know what resolutions our graphics card can handle and
for that we need a tool called hwinfo
**  hwinfo and fix framebuffer
#+BEGIN_SRC sh
 pacman -S hwinfo
#+END_SRC
#+BEGIN_SRC sh :results repla
hwinfo --framebuffer
#+END_SRC

#+RESULTS:

- Find the line which starts with GRUB_GFXMODE and update it to match the resolution you chose (in my case GRUB_GFXMODE=1280x1024x24);
- Find the line which starts with GRUB_GFXPAYLOAD_LINUX and update it to say GRUB_GFXPAYLOAD_LINUX=keep);
- Add the decimal representation of the hex mode you found with hwinfo to the GRUB_CMDLINE_LINUX_DEFAULT like so GRUB_CMDLINE_LINUX_DEFAULT="quiet splash vga=795
- Recreate the grub configuration with grub-mkconfig -o /boot/grub/grub.cfg and systemctl reboot


** Expected results
The output will look something like this:
You’ll find some hexadecimal number on the column on the left which you should convert to decimal. In my case, the mode I was interested in was 1280x1024x24, which is
0x031b, which is 795 in decimal. That number should now be added to /etc/default/grub plus the following changes:


#+BEGIN_EXAMPLE
02: None 00.0: 11001 VESA Framebuffer
[Created at bios.459]
Unique ID: rdCR.y3YwIxtOSHA
Hardware Class: framebuffer
Model: "NVIDIA GK110 Board - 20830010"
Vendor: "NVIDIA Corporation"
Device: "GK110 Board - 20830010"
SubVendor: "NVIDIA"
SubDevice:
Revision: "Chip Rev"
Memory Size: 14 MB
Memory Range: 0xf1000000-0xf1dfffff (rw)
Mode 0x0300: 640x400 (+640), 8 bits
Mode 0x0301: 640x480 (+640), 8 bits
Mode 0x0303: 800x600 (+800), 8 bits
Mode 0x0305: 1024x768 (+1024), 8 bits
Mode 0x0307: 1280x1024 (+1280), 8 bits
Mode 0x030e: 320x200 (+640), 16 bits
Mode 0x030f: 320x200 (+1280), 24 bits
Mode 0x0311: 640x480 (+1280), 16 bits
Mode 0x0312: 640x480 (+2560), 24 bits
Mode 0x0314: 800x600 (+1600), 16 bits
Mode 0x0315: 800x600 (+3200), 24 bits
Mode 0x0317: 1024x768 (+2048), 16 bits
Mode 0x0318: 1024x768 (+4096), 24 bits
Mode 0x031a: 1280x1024 (+2560), 16 bits
Mode 0x031b: 1280x1024 (+5120), 24 bits
Mode 0x0330: 320x200 (+320), 8 bits
Mode 0x0331: 320x400 (+320), 8 bits
Mode 0x0332: 320x400 (+640), 16 bits
Mode 0x0333: 320x400 (+1280), 24 bits
Mode 0x0334: 320x240 (+320), 8 bits
Mode 0x0335: 320x240 (+640), 16 bits
Mode 0x0336: 320x240 (+1280), 24 bits
Mode 0x033d: 640x400 (+1280), 16 bits
Mode 0x033e: 640x400 (+2560), 24 bits
Mode 0x034b: 1920x1080 (+1920), 8 bits
Mode 0x034c: 1920x1080 (+3840), 16 bits
Mode 0x034d: 1920x1080 (+7680), 24 bits
Mode 0x0360: 1280x800 (+1280), 8 bits
Mode 0x0361: 1280x800 (+5120), 24 bits
Config Status: cfg=new, avail=yes, need=no, active=unknown
#+END_EXAMPLE

* TODO X windows and xmonad

We’ll be installing a window manager, as opposed to a full desktop environment. It’s a good idea to understand the differences between the two. For me, the main reason
to go for a window manager was really performance.
** DONE xorg installations
   CLOSED: [2016-01-24 Sun 02:59]
#+BEGIN_SRC sh
pacman -S xorg-server xorg-server-utils xorg-apps xorg-xinit  xscreensaver feh ttf-inconsolata
#+END_SRC
** OPTIONAL nVIDIA
Let’s create our nVIDIA configuration file at /etc/X11/xorg.conf.d/20-nvidia.conf with
#+BEGIN_EXAMPLE
Section "Device"
    Identifier "Nvidia Card"
    Driver "nvidia"
    VendorName "NVIDIA Corporation"
    Option "NoLogo" "true"
EndSection
#+END_EXAMPLE

** TODO capslog as ctl and ctl alt backspace as kill windows
I made the Caps Lock key and alternative to CTRL key (for emacs) and I set CTRL+ALT+Backspace as
the combination to kill X Windows:

#+BEGIN_SRC sh
 localectl set-X11-keymap  caps:ctrl_modifier,terminate:ctrl_alt_bksp
#+END_SRC

#+RESULTS:

** DONE Next I configured the terminal to use the inconsolata font
   CLOSED: [2016-01-24 Sun 03:01]
#+BEGIN_SRC elisp :var buffer = inconsolata() :var filename="~/.Xresources"
  (with-temp-buffer
;;  (insert-file-contents filename)
  (insert buffer)
  (when (file-writable-p filename)
    (write-region (point-min) (point-max) filename nil))
  (buffer-string))
#+END_SRC

#+RESULTS:
:
: XTerm*reverseVideo: on
: xterm*faceName: Inconsolata:size=10:antialias=true

#+call: fread("~/.Xresources")

#+RESULTS:
:
: XTerm*reverseVideo: on
: xterm*faceName: Inconsolata:size=10:antialias=true

#+NAME: inconsolatatxt
#+BEGIN_SRC elisp
XTerm*reverseVideo: on
xterm*faceName: Inconsolata:size=10:antialias=true
#+END_SRC


#+NAME: inconsolata
#+BEGIN_SRC python :session :noweb yes
"""
<<inconsolatatxt>>
"""
#+END_SRC

#+RESULTS: inconsolata
:
: XTerm*reverseVideo: on
: xterm*faceName: Inconsolata:size=10:antialias=true







We’re almost done. We now get xmonad and configure it:

** DONE Xmonad installation
   CLOSED: [2016-01-24 Sun 03:01]
#+call: cmdaync("pacman -S xmonad xmonad-contrib cabal-install xmobar ghc haddock gmrun dmenu")
** DONE Configaring
   CLOSED: [2016-01-24 Sun 03:01]
The default configuration is a bit too white so let’s change it.
These changes are based upon several guides and tutorials found on the
xmonad page, on the Haskell wiki and on the Arch Linux Wiki.
They represent the bare minimum for me but, as with everything in this post, YMMV.

It uses xmobar to have a small text based bar on the top of the screen
and a background image. Nothing more.

***  ~/.xmonad/xmonad.hs
Let’s edit ~/.xmonad/xmonad.hs and add the following Haskell code
(remember to replace my references to /home/luis with your home directory):


#+name: rootxmo
#+BEGIN_SRC elisp :dir ~
(expand-file-name ".xmobarrc")
#+END_SRC

#+RESULTS:
: /root/.xmobarrc

#+NAME: xmonadcode
#+BEGIN_SRC haskell :tangle ~/.xmonad/xmonad.hs :noweb yes :mkdirp yes
import XMonad
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.DynamicLog
import XMonad.Util.Run
import XMonad.Util.EZConfig

main = do
xmproc <- spawnPipe "/usr/bin/xmobar <<rootxmo()>>"
    xmonad $ defaultConfig
    { manageHook = manageDocks <+> manageHook defaultConfig
    , layoutHook = avoidStruts  $  layoutHook defaultConfig
    , logHook = dynamicLogWithPP xmobarPP
    { ppOutput = hPutStrLn xmproc
        , ppTitle = xmobarColor "green" "" . shorten 50 }
    } `additionalKeys`
    [ ((mod4Mask .|. shiftMask, xK_z), spawn "xscreensaver-command -lock") ]
#+END_SRC

***  ~/.xmobarrc
#+NAME: xmobar
#+BEGIN_SRC sh :tangle ~/.xmobarrc
Config { font = "-*-Fixed-Bold-R-Normal-*-13-*-*-*-*-*-*-*"
    , bgColor = "black"
    , fgColor = "grey"
    , position = TopW L 100
    , commands = [ Run Weather "EDDB" ["-t","<station>: <tempC>C","-L","5","-H","30","--normal","green","--high","red","--low","lightblue"] 3600
        , Run MultiCpu ["-t","<autototal>","-L","5","-H","50","--normal","green","--high","red"] 50
        , Run Memory ["-t","Mem: <usedratio>%"] 0
        , Run Date "%a %b %_d %H:%M:%S" "date" 10
        , Run StdinReader
        ]
    , sepChar = "%"
    , alignSep = "}{"
    , template = "%StdinReader% }{ %multicpu% | %memory% | <fc=#ee9a00>%date%</fc> | %EDDB%"
}
#+END_SRC
*** ~/.xinitrc
Finally, find an image you like for background (I’m currently using this one), download it and edit you ~/.xinitrc:

#+NAME: xinit
#+BEGIN_SRC sh :tangle ~/.xinitrc
#!/bin/sh
#
# ~/.xinitrc
#
# Executed by startx (run your window manager from here)

if [ -d /etc/X11/xinit/xinitrc.d ]; then
    for f in /etc/X11/xinit/xinitrc.d/*; do
        [ -x "$f" ] && . "$f"
    done
    unset f
fi

# Xresources
[[ -f ~/.Xresources ]] && xrdb -merge ~/.Xresources

# Set the background Image
feh --bg-fill ~/dot/lambda.jpg

# start xscreensaver
/usr/bin/xscreensaver -no-splash &

# Start xmonad
exec xmonad

#+END_SRC

** YOROOT installtaion
#+BEGIN_SRC elisp :var filename="/etc/pacman.conf" :var buffer=addserverpy()
  (with-temp-buffer
  (insert-file-contents filename)
  (goto-char (point-max))
  (insert buffer)
  (when (file-writable-p filename)
    (write-region (point-min) (point-max) filename nil))
  (buffer-string))
#+END_SRC

#+RESULTS:
#+begin_example
#
# /etc/pacman.conf
#
# See the pacman.conf(5) manpage for option and repository directives

#
# GENERAL OPTIONS
#
[options]
# The following paths are commented out with their default values listed.
# If you wish to use different paths, uncomment and update the paths.
#RootDir     = /
#DBPath      = /var/lib/pacman/
#CacheDir    = /var/cache/pacman/pkg/
#LogFile     = /var/log/pacman.log
#GPGDir      = /etc/pacman.d/gnupg/
HoldPkg     = pacman glibc
#XferCommand = /usr/bin/curl -C - -f %u > %o
#XferCommand = /usr/bin/wget --passive-ftp -c -O %o %u
#CleanMethod = KeepInstalled
#UseDelta    = 0.7
Architecture = auto

# Pacman won't upgrade packages listed in IgnorePkg and members of IgnoreGroup
#IgnorePkg   =
#IgnoreGroup =

#NoUpgrade   =
#NoExtract   =

# Misc options
#UseSyslog
#Color
#TotalDownload
CheckSpace
#VerbosePkgLists

# By default, pacman accepts packages signed by keys that its local keyring
# trusts (see pacman-key and its man page), as well as unsigned packages.
SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional
#RemoteFileSigLevel = Required

# NOTE: You must run `pacman-key --init` before first using pacman; the local
# keyring can then be populated with the keys of all official Arch Linux
# packagers with `pacman-key --populate archlinux`.

#
# REPOSITORIES
#   - can be defined here or included from another file
#   - pacman will search repositories in the order defined here
#   - local/custom mirrors can be added here or in separate files
#   - repositories listed first will take precedence when packages
#     have identical names, regardless of version number
#   - URLs will have $repo replaced by the name of the current repo
#   - URLs will have $arch replaced by the name of the architecture
#
# Repository entries are of the format:
#       [repo-name]
#       Server = ServerName
#       Include = IncludePath
#
# The header [repo-name] is crucial - it must be present and
# uncommented to enable the repo.
#

# The testing repositories are disabled by default. To enable, uncomment the
# repo name header and Include lines. You can add preferred servers immediately
# after the header, and they will be used before the default mirrors.

#[testing]
#Include = /etc/pacman.d/mirrorlist

[core]
Include = /etc/pacman.d/mirrorlist

[extra]
Include = /etc/pacman.d/mirrorlist

#[community-testing]
#Include = /etc/pacman.d/mirrorlist

[community]
Include = /etc/pacman.d/mirrorlist

# An example of a custom package repository.  See the pacman manpage for
# tips on creating your own repositories.
#[custom]
#SigLevel = Optional TrustAll
#Server = file:///home/custompkgs

[archlinuxfr]
SigLevel = Never
Server = http://repo.archlinux.fr/$arch
#+end_example

#+NAME: addserver
#+BEGIN_SRC python
[archlinuxfr]
SigLevel = Never
Server = http://repo.archlinux.fr/$arch
#+END_SRC


#+RESULTS: addserver
:
: [archlinuxfr]
: SigLevel = Never
: Server = http://repo.archlinux.fr/$arch

#+NAME: addserverpy
#+BEGIN_SRC python :noweb yes :session
"""
<<addserver>>
"""
#+END_SRC

#+RESULTS: addserverpy
:
: [archlinuxfr]
: SigLevel = Never
: Server = http://repo.archlinux.fr/$arch


#+call: cmdaync("pacman -Syu")
#+call: cmdaync("pacman -S yaourt")
* Start X
At this point startx should start xmonad and show you your downloaded image as background.

This is a very very bare bones configuration which is supposed to be iterated. There’s still many things that can be done on top of this
- X windows is not starting automatically after you login. This is a good thing to change or even, if you prefer, use a display manager;
- emacs is still not configured or themed;
- xmobar can be tweaked even more;
- And there’s more applications to install (from the top of my head: firefox, java, node, intellij, clementine, vlc).

In the meantime, if you want to peek into some of these files, check my dot files repository on github.

For now the foundation is laid - a very minimal and super fast Linux with a windowing system which just gets out of the way. :-)
