#+TITLE: Emacs Starter Kit
#+OPTIONS: toc:2 num:nil ^:nil
* Org
** Code blocks
*** Load Language
   :PROPERTIES:
   :CUSTOM_ID: babel
   :END:
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (lisp . t)
     (sh . t)
     (python . t)))
#+end_src
*** default executable
   :PROPERTIES:
   :CUSTOM_ID: babel_eval_yes
   :END:

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

** Load Babel Libraries
#+BEGIN_SRC elisp
(org-babel-lob-ingest (expand-file-name "devops.org"))
#+END_SRC

* Installation
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:
*** Introduction
1. Install Emacs version 24 or greater.  Use your package manager if
   you have one and it has an install candidate for Emacs 24,
   otherwise install it directly [[http://savannah.gnu.org/projects/emacs/][from source]], or Mac binaries may be
   downloaded from the /nightlies/ section of
   http://emacsformacosx.com/builds
2. Checkout a version of the starter kit using git -- if you're new to
   git checkout this [[http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html][git-tutorial]], also we'd highly recommend that you
   try out [[http://zagadka.vm.bytemark.co.uk/magit/magit.html][magit]] the Emacs mode for git interaction.
   #+begin_src sh
     git clone http://github.com/eschulte/emacs24-starter-kit.git
   #+end_src
3. Move the resulting directory to =~/.emacs.d= [1]
7. Launch Emacs!

After setup you may need to restart Emacs one or twice while it
downloads packages from [[* Emacs Lisp Package Archive][ELPA]] -- errors parsing html from
=*tromey.com:80*= can generally be safely ignored.

If you are missing some autoloads after an update (should manifest
itself as =void function: foobar= errors) try M-x regen-autoloads.

If you want to keep your regular =~/.emacs.d= in place and just launch
a single instance using the starter kit, try the following invocation:
*** [[~/org][org directory]] backup
#+BEGIN_SRC sh
mv ~/org ~/backups
ls ~
#+END_SRC

#+RESULTS:

*** Link [[~/org][org directory]]
#+BEGIN_SRC sh :var path=pwd()
ln -s $path ~/org
ls ~/org
#+END_SRC

#+RESULTS:
| #starter-kit.org#                |
| arch.org                         |
| devops.org                       |
| git.org                          |
| init.el                          |
| job                              |
| learn.org                        |
| linux.org                        |
| notes.org                        |
| ssh                              |
| starter-kit-bindings.org         |
| starter-kit-defuns.org           |
| starter-kit-misc-recommended.org |
| starter-kit-misc.org             |
| starter-kit-org.org              |
| starter-kit.org                  |
| usb                              |

*** Tangle Code Block
#+begin_src sh :var path=pwd()  :tangle emacs_starter.sh  :shebang #!/bin/bash
  emacs -q -l $path/init.el \
      --eval "(run-hooks 'after-init-hook)" $1
#+end_src

*** Install in Desktop
#+BEGIN_SRC sh :var path=empath[0]   :dir /su:root@localhost:
ls -la $path/emacs_starter.sh
cp $path/emacs_starter.sh  /bin/em
chmod 755 /bin/em
ls -la /bin/em
#+END_SRC

Note that having a =~/.emacs= file might override the starter kit
loading, so if you've having trouble loading it, make sure that file
is not present.

*** Install in Server
#+BEGIN_SRC sh :var path=pwd()
ls -la $path/emacs_starter.sh
cp $path/emacs_starter.sh  /bin/em
chmod 755 /bin/em
ls -la /bin/em
#+END_SRC

#+RESULTS:
| -rwxr-xr-x | 1 | root | root | 158 | Jan | 22 | 18:06 | /usr/local/src/literate-devops/emacs_starter.sh |
| -rwxr-xr-x | 1 | root | root | 158 | Jan | 22 | 18:06 | /bin/em                                         |


Note that having a =~/.emacs= file might override the starter kit
loading, so if you've having trouble loading it, make sure that file
is not present.

*** Configure Prelude
**** clone  backup previous
   :PROPERTIES:
   :dir: /usr/local/src
   :END:
#+BEGIN_SRC sh :results replace
git clone git://github.com/bbatsov/prelude.git
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh
ls -l prelude
#+END_SRC

#+RESULTS:
| total      | 72 |      |      |       |     |    |       |                    |
| -rw-r--r-- |  1 | root | root |  1374 | Jan | 22 | 18:07 | CONTRIBUTING.md    |
| -rw-r--r-- |  1 | root | root | 26772 | Jan | 22 | 18:07 | README.md          |
| drwxr-xr-x |  2 | root | root |  4096 | Jan | 22 | 18:07 | core               |
| -rw-r--r-- |  1 | root | root |  5317 | Jan | 22 | 18:07 | init.el            |
| drwxr-xr-x |  3 | root | root |  4096 | Jan | 22 | 18:07 | modules            |
| drwxr-xr-x |  3 | root | root |  4096 | Jan | 22 | 18:07 | personal           |
| -rw-r--r-- |  1 | root | root |  1280 | Jan | 22 | 18:09 | prelude-modules.el |
| drwxr-xr-x |  2 | root | root |  4096 | Jan | 22 | 18:07 | sample             |
| drwxr-xr-x |  2 | root | root |  4096 | Jan | 22 | 18:07 | themes             |
| drwxr-xr-x |  2 | root | root |  4096 | Jan | 22 | 18:07 | utils              |
| drwxr-xr-x |  2 | root | root |  4096 | Jan | 22 | 18:07 | vendor             |

**** configure
   :PROPERTIES:
   :dir: /usr/local/src/prelude
   :END:

#+BEGIN_SRC sh :var file=sample-mod
cp sample/$file .
ls $file
#+END_SRC

#+RESULTS:
: prelude-modules.el

#+NAME: sample-mod
#+BEGIN_SRC sh
ls sample
#+END_SRC

#+RESULTS: sample-mod
: prelude-modules.el
***** TODO backup & link [[~/.emacs.d][emacs.d]]
Conn't be done inside emacs
#+BEGIN_SRC sh
mv ~/.emacs.d ~/backups/
ls -la ~/.emacs.d
#+END_SRC

#+BEGIN_SRC sh :noweb yes
dr=`pwd`
ln -s $dr ~/.emacs.d
ls -l ~/.emacs.d
#+END_SRC

**** Add starter kit
#+BEGIN_SRC sh
cp custom.el ~/.emacs.d/personal
#+END_SRC
**** Emacs Setup
#+NAME: ealias
#+begin_src sh
alias emd='emacs --daemon'
alias e='emacsclient -t'
alias ec='emacsclient -c'
alias vim='emacsclient -t'
alias vi='emacsclient -t'
export TERM=xterm-256color
#+end_src

#+BEGIN_SRC elisp :var file="~/.bashrc"
(with-temp-buffer (insert-file-contents file) (buffer-string))
#+END_SRC

Note that having a =~/.emacs= file might override the starter kit
loading, so if you've having trouble loading it, make sure that file
is not present.

* Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:

This section contains all code implementing the Emacs Starter Kit.  It
is probably safe to stop reading at this point unless you are
interested in the actual code implementing the starter kit.

- Function for loading other parts of the starter kit
  #+name: starter-kit-load
  #+begin_src emacs-lisp
    (defun starter-kit-load (file &optional header-or-tag)
      "Load configuration from other starter-kit-*.org files.
    If the optional argument is the id of a subtree then only
    configuration from within that subtree will be loaded.  If it is
    not an id then it will be interpreted as a tag, and only subtrees
    marked with the given tag will be loaded.

    For example, to load all of starter-kit-lisp.org simply
    add (starter-kit-load \"lisp\") to your configuration.

    To load only the 'window-system' config from
    starter-kit-misc-recommended.org add
     (starter-kit-load \"misc-recommended\" \"window-system\")
    to your configuration."
      (let ((file (expand-file-name (if (string-match "starter-kit-.+\.org" file)
                                        file
                                      (format "starter-kit-%s.org" file))
                                    starter-kit-dir)))
        (org-babel-load-file
         (if header-or-tag
             (let* ((base (file-name-nondirectory file))
                    (dir  (file-name-directory file))
                    (partial-file (expand-file-name
                                   (concat "." (file-name-sans-extension base)
                                           ".part." header-or-tag ".org")
                                   dir)))
               (unless (file-exists-p partial-file)
                 (with-temp-file partial-file
                   (insert
                    (with-temp-buffer
                      (insert-file-contents file)
                      (save-excursion
                        (condition-case nil ;; collect as a header
                            (progn
                              (org-link-search (concat"#"header-or-tag))
                              (org-narrow-to-subtree)
                              (buffer-string))
                          (error ;; collect all entries with as tags
                           (let (body)
                             (org-map-entries
                              (lambda ()
                                (save-restriction
                                  (org-narrow-to-subtree)
                                  (setq body (concat body "\n" (buffer-string)))))
                              header-or-tag)
                             body))))))))
               partial-file)
           file))))
  #+end_src

- Remove Menu bar, tool bar, start up messages
 #+NAME: starter-kit-remove_unnecessary
 #+BEGIN_SRC emacs-lisp
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1))
  (setq inhibit-startup-message t)
#+END_SRC

- Truncate Line
 #+NAME: starter-kit-truncate
 #+BEGIN_SRC emacs-lisp
 (setq-default truncate-lines nil)
 #+END_SRC

** Starter kit core
   :PROPERTIES:
   :CUSTOM_ID: starter-kit-core
   :END:
The following files contain the remainder of the core of the Emacs
Starter Kit.  All of the code in this section should be loaded by
everyone using the starter kit.

- Starter kit function definitions in [[file:starter-kit-defuns.org][starter-kit-defuns]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-defuns.org")
  #+end_src

- Key Bindings in [[file:starter-kit-bindings.org][starter-kit-bindings]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-bindings.org")
  #+end_src

- Miscellaneous settings in [[file:starter-kit-misc.org][starter-kit-misc]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-misc.org")
  #+end_src

# - Registers for jumping to commonly used files in [[file:starter-kit-registers.org][starter-kit-registers]]
#   #+begin_src emacs-lisp
#   (starter-kit-load "starter-kit-registers.org")
#   #+end_src

#   #+RESULTS:
#   : Loaded /home/rks/literalemacs/starter-kit-registers.el
- Org mode in [[starter-kit-org.org]]
#+BEGIN_SRC emacs-lisp
  (starter-kit-load "starter-kit-org.org")
#+END_SRC

#+RESULTS:
: Loaded /home/rks/literalemacs/starter-kit-org.el
