* File directory handleing
** pwd
#+NAME: pwd
#+BEGIN_SRC elisp :var file=""
(expand-file-name file)
#+END_SRC
** module
#+NAME: module
#+BEGIN_SRC elisp  :export none
  (last
   (split-string
    (replace-regexp-in-string "/" " "   (expand-file-name "")) ))
#+END_SRC

** Keyboard Macro for diff
#+BEGIN_EXAMPLE
;; Original keys: e D NUL ESC > ESC w C-x C-o C-x o C-x o C-x C-o C-x o q y

Command: last-kbd-macro
Key: none

Macro:

e			;; self-insert-command
D			;; self-insert-command
NUL			;; set-mark-command
ESC >			;; end-of-buffer
ESC w			;; kill-ring-save
C-x C-o			;; delete-blank-lines
C-x o			;; other-window
C-x o			;; other-window
C-x C-o			;; delete-blank-lines
C-x o			;; other-window
q			;; self-insert-command
y			;; self-insert-command

#+END_EXAMPLE
#+BEGIN_SRC elisp
(fset 'ashdiff
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("eD>woooqy" 0 "%d")) arg)))
#+END_SRC
** Send data to PIPE
   CLOCK: [2016-01-13 Wed 05:47]--[2016-01-13 Wed 05:58] =>  0:11
   :PROPERTIES:
   :Effort:   0:10
   :END:
#+NAME: cmdaync
#+BEGIN_SRC sh :var cmd="" :var mod=module[0] :noweb yes
  <<check_pipeserver_running>>
  echo  $cmd   > $pipe
#+END_SRC

#+RESULTS:
: command npm adduser is sended to /tmp/friends-aneesha

*** check_pipeserver_running
#+NAME: check_pipeserver_running
#+BEGIN_SRC sh
  pipe="/tmp/"$mod
  [ ! -p $pipe ] && exit 1 || echo "command $DT is sended to $pipe"
#+END_SRC

#+RESULTS: check_pipeserver_running
: command  is sended to /tmp/friends-aneesha

* file contents
** Write string
#+NAME: fwrite
#+BEGIN_SRC elisp :var filename=""  :var s=""
    (with-temp-buffer
      (insert s)
      (when (file-writable-p filename)
         (write-region (point-min) (point-max) filename nil))))
#+END_SRC
** Output file to string
#+name: fread
#+BEGIN_SRC elisp :var filename=""
    (with-temp-buffer
      (insert-file-contents filename)
      (buffer-string))
#+END_SRC

#+RESULTS:
: # friends-aneesha

** bash quote
#+NAME: beginsh
#+BEGIN_SRC sh  :noweb yes :results verbatim
echo $(cat << 'BBL_START'
#+END_SRC

#+NAME: endsh
#+BEGIN_SRC sh
BBL_START
)
#+END_SRC

** temp buffer
#+name: tmpbuf
#+BEGIN_SRC elisp :var buf="" :var name="*tmp*"
(progn
(switch-to-buffer-other-window name)
(erase-buffer)
(insert buf)
(other-window 1))
#+END_SRC

#+RESULTS: tmpbuf

** file search replace
#+NAME: filesearchreplace
#+BEGIN_SRC elisp :var filename="" :var sstr="" :var rstr=""
  (with-temp-buffer
    (insert-file-contents filename)
    (goto-char (point-min))
    (while (search-forward sstr nil t)
      (replace-match rstr))
    (when (file-writable-p filename)
      (write-region (point-min) (point-max) filename nil))
      (buffer-string))
#+END_SRC
** Add code to File
#+NAME: addcodetofile
#+BEGIN_SRC elisp :var buffer=""  :var filename=""
  (with-temp-buffer
;;  (insert-file-contents filename)
  (insert buffer)
  (when (file-writable-p filename)
    (write-region (point-min) (point-max) filename nil))
  (buffer-string))
#+END_SRC

* Setup.org
** Pandoc org to markdown_github
#+NAME: readme
#+BEGIN_SRC sh :var src="setup.org" :var dst="README.md" :noweb yes :post fwrite(bagesbuf())
/root/.cabal/bin/pandoc --from org --to markdown_github -o $dst $src
#+END_SRC
** run git macro
#+BEGIN_SRC elisp
(fset 'npmcommit
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("eDhwoooqyo<s		<e	OAOAOAo" 0 "%d")) arg)))
#+END_SRC
#+BEGIN_EXAMPLE
;; Original keys: # + c a 2*l : SPC c m d a y n c ( " n p m SPC r u n SPC c o 2*m i t " ) C-a C-c C-c

Command: last-kbd-macro
Key: none

Macro:

#			;; self-insert-command
+			;; self-insert-command
c			;; self-insert-command
a			;; self-insert-command
2*l			;; self-insert-command
:			;; self-insert-command
SPC			;; self-insert-command
c			;; self-insert-command
m			;; self-insert-command
d			;; self-insert-command
a			;; self-insert-command
y			;; self-insert-command
n			;; self-insert-command
c			;; self-insert-command
(			;; self-insert-command
"			;; self-insert-command
n			;; self-insert-command
p			;; self-insert-command
m			;; self-insert-command
SPC			;; self-insert-command
r			;; self-insert-command
u			;; self-insert-command
n			;; self-insert-command
SPC			;; self-insert-command
c			;; self-insert-command
o			;; self-insert-command
2*m			;; self-insert-command
i			;; self-insert-command
t			;; self-insert-command
"			;; self-insert-command
)			;; self-insert-command
C-a			;; org-beginning-of-line
C-c C-c			;; org-ctrl-c-ctrl-c

#+END_EXAMPLE

** bages
*** Contnts
#+NAME: bages
#+BEGIN_SRC  python
[![travis build](https://img.shields.io/travis/chowdhuryashraf/friends-aneesha.svg)](https://travis-ci.org/chowdhuryashraf/friends-aneesha)
[![codecov coverage](https://img.shields.io/codecov/c/github/chowdhuryashraf/friends-aneesha.svg)](https://codecov.io/github/chowdhuryashraf/friends-aneesha)
[![version](https://img.shields.io/npm/v/friends-aneesha.svg)](https://www.npmjs.com/package/friends-aneesha)
[![downloads](https://img.shields.io/npm/dm/friends-aneesha.svg)](https://www.npmjs.com/package/friends-aneesha)
[![MIT License](https://img.shields.io/npm/l/friends-aneesha.svg)](https://www.npmjs.com/package/friends-aneesha)
#+END_SRC

*** Add Contents
#+name: bagesbuf
#+BEGIN_SRC elisp :var buf=write_bages() :var mod=module[0] :var end=fread("README.md")
(concat  buf  "\n" mod "\n" "===============" "\n" end)
#+END_SRC

#+RESULTS: bagesbuf

#+NAME: write_bages
#+BEGIN_SRC sh :noweb yes
write_bages= <<beginsh>>
<<bages>>
<<endsh>>
#+END_SRC

#+RESULTS: write_bages
* Send data to PIPE
   CLOCK: [2016-01-13 Wed 05:47]--[2016-01-13 Wed 05:58] =>  0:11
   :PROPERTIES:
   :Effort:   0:10
   :END:
#+NAME: cmdaync
#+BEGIN_SRC sh :var cmd="" :var mod=module[0] :noweb yes
<<check_pipeserver_running>>
echo  $cmd   > $pipe
#+END_SRC

#+RESULTS:
: command npm adduser is sended to /tmp/friends-aneesha

*** check_pipeserver_running
#+NAME: check_pipeserver_running
#+BEGIN_SRC sh
pipe="/tmp/"$mod
[ ! -p $pipe ] && exit 1 || echo "command $DT is sended to $pipe"
#+END_SRC

#+RESULTS: check_pipeserver_running
: command  is sended to /tmp/friends-aneesha
* Linux
#+NAME: useradd
#+BEGIN_SRC sh :var username=""
 useradd --shell /usr/bin/fish -g users --create-home -m -G wheel $username
#+END_SRC
* babel
** Wrap
#+NAME: wrap
#+BEGIN_SRC elisp :var snippet=""
  (with-temp-buffer
    (insert "  - Wrap ")
    (insert snippet)
    (insert "\n#+NAME: ")
    (insert snippet)
    (insert "_txt")
    (insert "\n#+BEGIN_SRC python :session :noweb yes\n")
    (insert "\"\"\"\n<<")
    (insert snippet)
    (insert ">>\n\"\"\"\n")
    (insert "#+END_SRC")
    (buffer-string))
#+END_SRC
* Curry
** Multiline
#+BEGIN_SRC js :cmd "babel-node"
return ```
HEllo
WOrld
abcdefgh
```
#+END_SRC
** Clujure
#+BEGIN_SRC js :cmd "babel-node"
  var digit_name = (function (n) {
      var names;
      return function (n) {
          if (!names){
              names = ['zero', 'one', 'two', 'three','four', 'five','six' ];
          }
          return names[n];
      };
  }());
  console.log(digit_name(6));
#+END_SRC

#+RESULTS:
: six
: undefined

** split words
#+NAME: splitw
#+BEGIN_SRC js :cmd "babel-node" :var a="Test123***  TEST"
    return a.split(" ").reduce(function (max, val) {
        console.log(max + "  " + val);
        return val.length > max ? val.length : max;
    } , 0);
#+END_SRC

#+RESULTS: splitw
: 0  Test123***
: 10
: 10  TEST
: 10

** substring

#+BEGIN_SRC js :cmd "babel-node" :var a="abcdefgh" :results output
console.log(a.substr(a.length - 3, a.length));
#+END_SRC
#+RESULTS:
: fgh

#+BEGIN_SRC js :cmd "babel-node" :var str="abcdefgh"  :var target="fgh"
return target === str.substr(str.length - target.length, str.length - 1)
#+END_SRC

#+RESULTS:
: true

** multidimen arrary
#+BEGIN_SRC js :cmd "babel-node" :results output
  function largestOfFour(arr) {
    var p=[];
    arr.reduce(function(arrmax, arr1){
        var maxnumberofthearray = arr1.reduce(function(elmmax, elm) {
            return elm > elmmax ? elm: elmmax;
        },0);
        p.push(maxnumberofthearray);
        return 0;
    } , 0);
    return p;
  }

  console.log(largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]));
#+END_SRC

#+RESULTS:
: [ 5, 27, 39, 1001 ]

** filter
*** MAP
#+BEGIN_SRC js :cmd "babel-node" :results output
  var contacts = [
      {
          "firstName": "Akira",
          "lastName": "Laine",
          "number": "0543236543",
          "likes": ["Pizza", "Coding", "Brownie Points"]
      },
      {
          "firstName": "Harry",
          "lastName": "Potter",
          "number": "0994372684",
          "likes": ["Hogwarts", "Magic", "Hagrid"]
      },
      {
          "firstName": "Sherlock",
          "lastName": "Holmes",
          "number": "0487345643",
          "likes": ["Intriguing Cases", "Violin"]
      },
      {
          "firstName": "Kristian",
          "lastName": "Vos",
          "number": "unknown",
          "likes": ["Javascript", "Gaming", "Foxes"]
      }
  ];


  function lookUp(firstName, prop){
  // Only change code below this line
    var directory = contacts.filter(function(address){
      if ( (prop in  address) && address["firstName"] === firstName ){
        return true;
      }
      return false;
    });
    return !directory.length ? "No such contact" : directory[0][prop];

  // Only change code above this line
  }

  // Change these values to test your function
  console.log(lookUp("Akira", "likes"));

#+END_SRC

#+RESULTS:
: [ 'Pizza', 'Coding', 'Brownie Points' ]

** TODO Prototype
#+BEGIN_SRC js :cmd "node-babel"  :results output
  const food = {
      init: function (type) {
          this.type = type;
      },
      eat: function() {
          console.log('you ate the')
      }


#+END_SRC

#+RESULTS:

** Map Reduce
#+BEGIN_SRC js :cmd "babel-node" :results output replace
  function chunk(arr, size) {
    // Break it up.
    return arr.reduce(function(atom,val,index){
        if (index%size === 0){
            atom.push(arr.slice(index,size+index));
        }
        return atom;
    } , [] );
  }

  console.log(chunk(["a", "b", "c", "d"], 2));
#+END_SRC

#+RESULTS:
** char to string
#+BEGIN_SRC js :cmd "babel-node" :results output
  var a = "URYYB".split("").map(function(p){
      return /\s/.test(p) ? p: String.fromCharCode((p.charCodeAt(0)-65 +13)%26 +65);
  });
  console.log( "" + a);
#+END_SRC

#+RESULTS:
: H,E,L,L,O

** string Matching case
#+BEGIN_SRC js :cmd "babel-node" :results output
  function mutation(arr) {
    return arr[1].toLowerCase().split("").filter(function(m){
      return arr[0].toLowerCase().split("").indexOf(m) >= 0;
    }).length === arr[1].length;
/*
.reduce(function(a,b){
      if (a){
        return b >= 0? true: false;
      }
      return false;
    });
*/
  }
  console.log("|" + mutation(["hello", "Hello"]) + "|");
#+END_SRC

#+RESULTS:
: |true|

** Function Argument convert to array
#+BEGIN_SRC js :cmd "babel-node" :resutls output
  function destroyer(arr) {
    // Remove all the values
      var args = Array.prototype.slice.call(arguments, 1);
    return arr.filter(function(v){
        return !args.reduce(function(isthere,val){
            if (isthere === true) return true;
            return  (val === v) ? true : false;
      },false);
    });
  }

console.log(destroyer([1, 2, 3, 1, 2, 3], 2, 3));
#+END_SRC

#+RESULTS:
| 1 | 1 |

** sort
#+BEGIN_SRC js :cmd "babel-node" :resutls output
  function where(arr, num) {
    // Find my place in this sorted array.
    return arr.sort(function(a,b){
      return a > b;
    }).reduce(function(a,pos,index) {
        if ( pos < num )
            return a+1;
        return a;
    },0);
  }
  console.log(where([40, 60], 50));
#+END_SRC

#+RESULTS:
: 1
: undefined
** Sum min to max

#+BEGIN_SRC js :cmd "babel-node" :resutls output
  function sumAll(arr) {
    return [Math.min(arr[0],arr[1]), Math.max(arr[0],arr[1])].reduce(function(sum,b){
        return (b*(b+1))/2 - sum;
    },Math.min(arr[0],arr[1]));
  }

  console.log(sumAll([1, 4]));
#+END_SRC

#+RESULTS:
: 10
: undefined

** diffs

#+BEGIN_SRC js :cmd "babel-node" :resutls  output
  function diff(arr1, arr2) {
      var arr = arr1;
      // Same, same; but different.

      return arr2.filter( function (val) {
          var flag=true;
          arr = arr.reduce(function(diffs,elm){
              if(elm === val){
                  flag = false;
                  return diffs;
              }
              return diffs.concat(elm);
          },[]);
          return flag;
      }).concat(arr);
  }

return  diff(["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]);

#+END_SRC

#+RESULTS:
| diorite | pink wool |

** Roman Numerial
#+NAME: ruman
#+BEGIN_SRC js :cmd "babel-node" :var num="353"
  var rumannumberrule = function(x,index){
      var rumancombination = [["I","V"],["X","L"],["C","D"]];
      if (x < 4) return rumancombination[index][0].repeat(x);
      if (x === 4) return rumancombination[index].join("");
      if (x < 9 ) return rumancombination[index][1] +  rumancombination[index][0].repeat(x-5);
      return rumancombination[index][0] + rumancombination[index+1][0];
  };

  var numtoarray = function(nm, numarr){
      if (nm === 0) return numarr;
      numarr.unshift(nm%10);
      return numtoarray(Math.floor(nm/10),numarr);
  };

  return numtoarray(num,[]).map(function(val, index,arrl) {
      return rumannumberrule(val,arrl.length - index -1);
  }).join("");
#+END_SRC

#+RESULTS: ruman
: CCCLIII

#+call: ruman(19)

#+RESULTS:
: XIX


#+BEGIN_SRC js :cmd "babel-node" :var r="I"
  var numtoarray = function(nm, numarr){
      if (nm === 0) return numarr;
      numarr.push(nm%10);
      return numtoarray(Math.floor(nm/10),numarr);
  };
  return numtoarray(322, []);
#+END_SRC

#+RESULTS:
| 2 | 2 | 3 |

** Reduce Data to Manipulate
#+BEGIN_SRC sh
npm install -g fs
#+END_SRC

#+RESULTS:
| /usr/local/lib |          |
| └──            | fs@0.0.2 |
|                |          |

#+BEGIN_SRC js :cmd "babel-node"
  let fs = require('fs');
  let output = fs.readFileSync('data.org','utf8')
                 .trim()
                 .split('\n')
                 .map( line => line.split('|').map( word => word.trim() )
                                              .filter(word => word.length))
                 .reduce((customers , line) => {
                     customers[line[0]] = customers[line[0]] || []
                     customers[line[0]].push({
                         name: line[1],
                         price: line[2],
                         quantity: line[3]
                     })
                     return customers
                  }, {})

  console.log('output', JSON.stringify(output, null, 2));
#+END_SRC

#+RESULTS:
#+begin_example
output {
  "mark Johnson": [
    {
      "name": "waffle",
      "price": "iron",
      "quantity": "80"
    },
    {
      "name": "blender",
      "price": "200",
      "quantity": "1"
    },
    {
      "name": "knife",
      "price": "10",
      "quantity": "4"
    }
  ],
  "Nikita Smith": [
    {
      "name": "waffle",
      "price": "iron",
      "quantity": "80"
    },
    {
      "name": "knife",
      "price": "10",
      "quantity": "2"
    },
    {
      "name": "nuts",
      "price": "20",
      "quantity": "3"
    }
  ]
}
undefined
#+end_example
** Curring
#+BEGIN_SRC js :cmd "babel-node"
  let dragons = [
      { name: 'flpikin', element: 'lighting'},
      { name: 'noomi', element: 'lighting'},
      { name: 'kora', element: 'fire'},
      { name: 'doomer', element: 'timewarp'}
  ]

  let hasElement =
      (element, obj) => obj.element === element

  let lightingDragons =
      dragons.filter( x => hasElement('lighting',x))

  console.log(JSON.stringify(lightingDragons,null,2)
#+END_SRC

#+RESULTS:
** Regex
*** reduce to alplanumaric
#+NAME: onlyalphanum
#+BEGIN_SRC js :cmd "babel-node" :var a="Test123***  TEST"
  return a.replace(/[^a-z0-9]/gi,'');
#+END_SRC

#+RESULTS:
: Test123TEST

#+call: onlyalphanum("race car")

#+RESULTS:
: racecar

*** Hello World
#+BEGIN_SRC js :cmd "babel-node"
return "thisIsSpinalTap".replace(/([a-z])([A-Z])/g,"$1-$2")

#+END_SRC

#+RESULTS:
: this-Is-Spinal-Tap

*** Unclassifed
#+BEGIN_SRC js :cmd "babel-node" :resutls output
let re = /\w+\s/g;
let str = "fee fi fo fum";
let myArr = str.match(re);
//console.log( myArr);
console.log(/[a-z]+/.test(str[2]))
#+END_SRC

#+RESULTS:
: true
: undefined

#+BEGIN_SRC js :cmd "babel-node" :resutls output
var myArray = /d(b+)d/g.exec("cdbbbdsbz");
console.log(myArray.index);
#+END_SRC

#+RESULTS:
: 1
: undefined

#+BEGIN_SRC js :cmd "babel-node" :resutls output
  var myRe = new RegExp("\\w+\\s*","g");
  var myArray = "I go    to   school everyday".match(myRe);
  console.log(myArray);
#+END_SRC

#+RESULTS:
| I | go | to | school | everyday |

#+BEGIN_SRC js :cmd "babel-node" :resutls output
let re = /(\w+)\s(\w+)/;
let str = "John Smith";
let newStr = str.replace(re ,"$2, $1");
console.log(newStr);
#+END_SRC

#+RESULTS:
: Smith, John
: undefined

** crypto
#+BEGIN_SRC js :cmd "babel-node" :resutls output
  function translate(str) {
    var suffix="yay";
    var remainder ="";
    var vowelisthere = false;
    return str.split("").map(function(elm,index){
      var vowel={
        "a": true,
        "e": true,
        "i": true,
        "o": true,
        "u": true
      };
      console.log("|" + vowel[elm] + "|" + elm + "|" );
      if (vowel.hasOwnProperty(elm) && vowel[elm] === true){
          vowelisthere = true;
      }
      if (vowelisthere === false){
          remainder = remainder + elm;
          suffix= "ay";
          return "";
      }
      if (index === str.length -1){
        return elm + remainder + suffix;
      }
      return elm;
    }).join("");
  }

  console.log(translate("consonant"));

#+END_SRC

#+RESULTS:
#+begin_example
|undefined|c|
|true|o|
|undefined|n|
|undefined|s|
|true|o|
|undefined|n|
|true|a|
|undefined|n|
|undefined|t|
onsonantcay
undefined
#+end_example

** missing letter
#+BEGIN_SRC js :cmd "babel-node"  :resutls output
  function fearNotLetter(str) {
    var miss = undefined;
    str.split("").reduce(function(missing,b){
        if (b.charCodeAt(0) !== missing && miss === undefined) {
          console.log("|"+b+"|"+missing +"|" + b.charCodeAt(0) + "|");
          miss=String.fromCharCode(missing);
        }
        return missing+1;
    }, str[0].charCodeAt(0));
    return miss;
  }
fearNotLetter("abcdefghjklmno")

#+END_SRC

#+RESULTS:
: |j|105|106|
: undefined

#+BEGIN_SRC js :cmd "babel-node"
return "A".charCodeAt(0)
#+END_SRC

#+RESULTS:
: 65

** Sorted Union
#+BEGIN_SRC js :cmd "babel-node"
      function diff(arr1, arr2) {
          var arr = arr2;
          // Same, same; but different.

          return arr1.filter( function (val) {
              var flag=true;
              arr = arr.reduce(function(diffs,elm){
                  if(elm === val){
                      flag = false;
                      return diffs;
                  }
                  if (typeof elm === "number")
                      return diffs.concat(elm);
                  return diffs.concat([elm])
              },[]);
              return true;
          }).concat(arr);
      }

    function unite(arr1, arr2, arr3) {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function(flat,arr){
            return diff(flat,arr);
        }, []);
    }
  //  return unite([1, 2, 3], [5, 2, 1]);
  return unite([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8])

#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 5 | 4 | 6 | 7 | 8 |
** html sytex change
#+BEGIN_SRC js :cmd "babel-node" :restuls output
    function convert(str) {
      // &colon;&rpar;
        var htmlized = (function() {
            var htmlmap = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                "\"":  "&quot;",
                "'": "&apos;",
            };
            return function(value) {
                return htmlmap[value];
            }
        }());
      var matched = str.match(/([&<>"'])/g);
      return !matched ? str : matched.reduce(function(st,elm){
          return st.replace(elm, htmlized(elm));
      },str);

    }

var r=convert("abc & bcd");
console.log(r);
#+END_SRC

#+RESULTS:
: abc &amp; bcd
: undefined

#+BEGIN_SRC js :cmd "babel-node" :resutls output
function convert(str){
  return str;
}
var r=convert("Dolce Gabbana Hello");
console.log(r);
#+END_SRC

#+RESULTS:
: Dolce Gabbana Hello
: undefined

** Object
#+BEGIN_SRC js :cmd "babel-node" :resutls output
  function hello(){
      var ar=[3,33,[333]];
      var f = function(arrr) {
          return arrr[2];
      }
      return f(ar).concat(3);
  }
  return hello();
#+END_SRC

#+RESULTS:
| 333 | 3 |

** Sum of All prime
#+BEGIN_SRC js :results output
  function sumPrimes(num) {
    var populate = function (x,isprimes){
      isprimes.push(x);
      if (x === num) return isprimes;
      return populate(x+1);
    };

    var limit = Math.sqrt(num);

    var isprimefun = function(primearr,n){
      if ( primearr[n] > limit){
        return primearr;
      }

      var primearr_1 = primearr.filter(function(elm){
         if (elm%primearr[n])
           return true;
         return false;
        });
      return isprimefun(primearr_1,primearr_1[n+1]);
    };

    return isprimefun(populate(2,[]),1);

  }

  return sumPrimes(10);

#+END_SRC

#+RESULTS:
